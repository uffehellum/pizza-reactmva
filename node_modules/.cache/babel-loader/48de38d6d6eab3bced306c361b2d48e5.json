{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { DocumentCardType } from './DocumentCard.types';\nimport { BaseComponent, KeyCodes, css } from '../../Utilities';\nimport * as stylesImport from './DocumentCard.scss';\nvar styles = stylesImport;\n\nvar DocumentCard =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(DocumentCard, _super);\n\n  function DocumentCard(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._rootElement = React.createRef();\n\n    _this._onClick = function (ev) {\n      _this._onAction(ev);\n    };\n\n    _this._onKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {\n        _this._onAction(ev);\n      }\n    };\n\n    _this._onAction = function (ev) {\n      var _a = _this.props,\n          onClick = _a.onClick,\n          onClickHref = _a.onClickHref;\n\n      if (onClick) {\n        onClick(ev);\n      } else if (!onClick && onClickHref) {\n        // If no onClick Function was provided and we do have an onClickHref, redirect to the onClickHref\n        window.location.href = onClickHref;\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    };\n\n    _this._warnDeprecations({\n      accentColor: undefined\n    });\n\n    return _this;\n  }\n\n  DocumentCard.prototype.render = function () {\n    var _a = this.props,\n        onClick = _a.onClick,\n        onClickHref = _a.onClickHref,\n        children = _a.children,\n        className = _a.className,\n        type = _a.type,\n        accentColor = _a.accentColor;\n    var actionable = onClick || onClickHref ? true : false; // Override the border color if an accent color was provided (compact card only)\n\n    var style;\n\n    if (type === DocumentCardType.compact && accentColor) {\n      style = {\n        borderBottomColor: accentColor\n      };\n    } // if this element is actionable it should have an aria role\n\n\n    var role = actionable ? onClick ? 'button' : 'link' : undefined;\n    var tabIndex = actionable ? 0 : undefined;\n    return React.createElement(\"div\", {\n      ref: this._rootElement,\n      tabIndex: tabIndex,\n      \"data-is-focusable\": actionable,\n      role: role,\n      className: css('ms-DocumentCard', styles.root, (_b = {}, _b['ms-DocumentCard--actionable ' + styles.rootIsActionable] = actionable, _b['ms-DocumentCard--compact ' + styles.rootIsCompact] = type === DocumentCardType.compact ? true : false, _b), className),\n      onKeyDown: actionable ? this._onKeyDown : undefined,\n      onClick: actionable ? this._onClick : undefined,\n      style: style\n    }, children);\n\n    var _b;\n  };\n\n  DocumentCard.prototype.focus = function () {\n    if (this._rootElement.current) {\n      this._rootElement.current.focus();\n    }\n  };\n\n  DocumentCard.defaultProps = {\n    type: DocumentCardType.normal\n  };\n  return DocumentCard;\n}(BaseComponent);\n\nexport { DocumentCard };","map":null,"metadata":{},"sourceType":"module"}
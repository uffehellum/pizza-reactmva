{"ast":null,"code":"var _warningCallback = undefined;\n/**\r\n * Warns when a deprecated props are being used.\r\n *\r\n * @public\r\n * @param componentName - The name of the component being used.\r\n * @param props - The props passed into the component.\r\n * @param deprecationMap - The map of deprecations, where key is the prop name and the value is\r\n * either null or a replacement prop name.\r\n */\n\nexport function warnDeprecations(componentName, props, deprecationMap) {\n  for (var propName in deprecationMap) {\n    if (props && propName in props) {\n      var deprecationMessage = componentName + \" property '\" + propName + \"' was used but has been deprecated.\";\n      var replacementPropName = deprecationMap[propName];\n\n      if (replacementPropName) {\n        deprecationMessage += \" Use '\" + replacementPropName + \"' instead.\";\n      }\n\n      warn(deprecationMessage);\n    }\n  }\n}\n/**\r\n * Warns when two props which are mutually exclusive are both being used.\r\n *\r\n * @public\r\n * @param componentName - The name of the component being used.\r\n * @param props - The props passed into the component.\r\n * @param exclusiveMap - A map where the key is a parameter, and the value is the other parameter.\r\n */\n\nexport function warnMutuallyExclusive(componentName, props, exclusiveMap) {\n  for (var propName in exclusiveMap) {\n    if (props && propName in props) {\n      var propInExclusiveMapValue = exclusiveMap[propName];\n\n      if (propInExclusiveMapValue && propInExclusiveMapValue in props) {\n        warn(componentName + \" property '\" + propName + \"' is mutually exclusive with '\" + exclusiveMap[propName] + \"'. Use one or the other.\");\n      }\n    }\n  }\n}\n/**\r\n * Warns when props are required if a condition is met.\r\n *\r\n * @public\r\n * @param componentName - The name of the component being used.\r\n * @param props - The props passed into the component.\r\n * @param requiredProps - The name of the props that are required when the condition is met.\r\n * @param conditionalPropName - The name of the prop that the condition is based on.\r\n * @param condition - Whether the condition is met.\r\n */\n\nexport function warnConditionallyRequiredProps(componentName, props, requiredProps, conditionalPropName, condition) {\n  if (condition === true) {\n    for (var _i = 0, requiredProps_1 = requiredProps; _i < requiredProps_1.length; _i++) {\n      var requiredPropName = requiredProps_1[_i];\n\n      if (!(requiredPropName in props)) {\n        warn(componentName + \" property '\" + requiredPropName + \"' is required when '\" + conditionalPropName + \"' is used.'\");\n      }\n    }\n  }\n}\n/**\r\n * Sends a warning to console, if the api is present.\r\n *\r\n * @public\r\n * @param message - Warning message.\r\n */\n\nexport function warn(message) {\n  if (_warningCallback) {\n    _warningCallback(message);\n  } else if (console && console.warn) {\n    console.warn(message);\n  }\n}\n/**\r\n * Configures the warning callback. Passing in undefined will reset it to use the default\r\n * console.warn function.\r\n *\r\n * @public\r\n * @param warningCallback - Callback to override the generated warnings.\r\n */\n\nexport function setWarningCallback(warningCallback) {\n  _warningCallback = warningCallback;\n}","map":null,"metadata":{},"sourceType":"module"}
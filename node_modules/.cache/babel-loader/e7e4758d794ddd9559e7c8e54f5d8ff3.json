{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { Customizations } from './Customizations';\nimport { hoistStatics } from './hoistStatics';\nimport { CustomizerContext } from './Customizer';\nimport { concatStyleSets } from '@uifabric/merge-styles';\nexport function customizable(scope, fields, concatStyles // tslint:disable-next-line:no-any\n) {\n  // tslint:disable-next-line:no-shadowed-variable\n  return function customizableFactory( // tslint:disable-next-line:no-any\n  ComposedComponent // tslint:disable-next-line:no-any\n  ) {\n    var resultClass = (_a =\n    /** @class */\n    function (_super) {\n      tslib_1.__extends(ComponentWithInjectedProps, _super); // tslint:disable-next-line:no-any\n\n\n      function ComponentWithInjectedProps(props) {\n        var _this = _super.call(this, props) || this;\n\n        _this._onSettingChanged = _this._onSettingChanged.bind(_this);\n        return _this;\n      }\n\n      ComponentWithInjectedProps.prototype.componentDidMount = function () {\n        Customizations.observe(this._onSettingChanged);\n      };\n\n      ComponentWithInjectedProps.prototype.componentWillUnmount = function () {\n        Customizations.unobserve(this._onSettingChanged);\n      };\n\n      ComponentWithInjectedProps.prototype.render = function () {\n        var _this = this;\n\n        return React.createElement(CustomizerContext.Consumer, null, function (context) {\n          var defaultProps = Customizations.getSettings(fields, scope, context.customizations); // tslint:disable-next-line:no-any\n\n          var componentProps = _this.props;\n\n          if (concatStyles) {\n            var mergedStyles = concatStyleSets(defaultProps.styles, componentProps.styles);\n            return React.createElement(ComposedComponent, tslib_1.__assign({}, defaultProps, componentProps, {\n              styles: mergedStyles\n            }));\n          }\n\n          return React.createElement(ComposedComponent, tslib_1.__assign({}, defaultProps, componentProps));\n        });\n      };\n\n      ComponentWithInjectedProps.prototype._onSettingChanged = function () {\n        this.forceUpdate();\n      };\n\n      return ComponentWithInjectedProps;\n    }(React.Component), _a.displayName = 'Customized' + scope, _a);\n    return hoistStatics(ComposedComponent, resultClass);\n\n    var _a;\n  };\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { BaseComponent, divProperties, getNativeProps, provideContext, createRef } from '../../Utilities';\nvar RESIZE_DELAY = 16;\n/**\r\n * Returns a simple object is able to store measurements with a given key.\r\n */\n\nexport var getMeasurementCache = function getMeasurementCache() {\n  var measurementsCache = {};\n  return {\n    /**\r\n     * Checks if the provided data has a cacheKey. If it has a cacheKey and there is a\r\n     * corresponding entry in the measurementsCache, then it will return that value.\r\n     * Returns undefined otherwise.\r\n     */\n    getCachedMeasurement: function getCachedMeasurement(data) {\n      if (data && data.cacheKey && measurementsCache.hasOwnProperty(data.cacheKey)) {\n        return measurementsCache[data.cacheKey];\n      }\n\n      return undefined;\n    },\n\n    /**\r\n     * Should be called whenever there is a new measurement associated with a given data object.\r\n     * If the data has a cacheKey, store that measurement in the measurementsCache.\r\n     */\n    addMeasurementToCache: function addMeasurementToCache(data, measurement) {\n      if (data.cacheKey) {\n        measurementsCache[data.cacheKey] = measurement;\n      }\n    }\n  };\n};\n/**\r\n * Returns a function that is able to compute the next state for the ResizeGroup given the current\r\n * state and any measurement updates.\r\n */\n\nexport var getNextResizeGroupStateProvider = function getNextResizeGroupStateProvider(measurementCache) {\n  if (measurementCache === void 0) {\n    measurementCache = getMeasurementCache();\n  }\n\n  var _measurementCache = measurementCache;\n\n  var _containerWidth;\n  /**\r\n   * Gets the width of the data rendered in a hidden div.\r\n   * @param measuredData - The data corresponding to the measurement we wish to take.\r\n   * @param getElementToMeasureWidth - A function that returns the measurement of the rendered data. Only called when the measurement\r\n   * is not in the cache.\r\n   */\n\n\n  function _getMeasuredWidth(measuredData, getElementToMeasureWidth) {\n    var cachedWidth = _measurementCache.getCachedMeasurement(measuredData);\n\n    if (cachedWidth !== undefined) {\n      return cachedWidth;\n    }\n\n    var measuredWidth = getElementToMeasureWidth();\n\n    _measurementCache.addMeasurementToCache(measuredData, measuredWidth);\n\n    return measuredWidth;\n  }\n  /**\r\n   * Will get the next IResizeGroupState based on the current data while trying to shrink contents\r\n   * to fit in the container.\r\n   * @param data - The initial data point to start measuring.\r\n   * @param onReduceData - Function that transforms the data into something that should render with less width.\r\n   * @param getElementToMeasureWidth - A function that returns the measurement of the rendered data. Only called when the measurement\r\n   * is not in the cache.\r\n   */\n\n\n  function _shrinkContentsUntilTheyFit(data, onReduceData, getElementToMeasureWidth) {\n    var dataToMeasure = data;\n\n    var measuredWidth = _getMeasuredWidth(data, getElementToMeasureWidth);\n\n    while (measuredWidth > _containerWidth) {\n      var nextMeasuredData = onReduceData(dataToMeasure); // We don't want to get stuck in an infinite render loop when there are no more\n      // scaling steps, so implementations of onReduceData should return undefined when\n      // there are no more scaling states to apply.\n\n      if (nextMeasuredData === undefined) {\n        return {\n          renderedData: dataToMeasure,\n          resizeDirection: undefined,\n          dataToMeasure: undefined\n        };\n      }\n\n      measuredWidth = _measurementCache.getCachedMeasurement(nextMeasuredData); // If the measurement isn't in the cache, we need to rerender with some data in a hidden div\n\n      if (measuredWidth === undefined) {\n        return {\n          dataToMeasure: nextMeasuredData,\n          resizeDirection: 'shrink'\n        };\n      }\n\n      dataToMeasure = nextMeasuredData;\n    }\n\n    return {\n      renderedData: dataToMeasure,\n      resizeDirection: undefined,\n      dataToMeasure: undefined\n    };\n  }\n  /**\r\n   * This function should be called when the state changes in a manner that might allow for more content to fit\r\n   * on the screen, such as the window width growing.\r\n   * @param data - The initial data point to start measuring.\r\n   * @param onGrowData - Function that transforms the data into something that may take up more space when rendering.\r\n   * @param getElementToMeasureWidth - A function that returns the measurement of the rendered data. Only called when the measurement\r\n   * is not in the cache.\r\n   */\n\n\n  function _growDataUntilItDoesNotFit(data, onGrowData, getElementToMeasureWidth, onReduceData) {\n    var dataToMeasure = data;\n\n    var measuredWidth = _getMeasuredWidth(data, getElementToMeasureWidth);\n\n    while (measuredWidth < _containerWidth) {\n      var nextMeasuredData = onGrowData(dataToMeasure); // We don't want to get stuck in an infinite render loop when there are no more\n      // scaling steps, so implementations of onGrowData should return undefined when\n      // there are no more scaling states to apply.\n\n      if (nextMeasuredData === undefined) {\n        return {\n          renderedData: dataToMeasure,\n          resizeDirection: undefined,\n          dataToMeasure: undefined\n        };\n      }\n\n      measuredWidth = _measurementCache.getCachedMeasurement(nextMeasuredData); // If the measurement isn't in the cache, we need to rerender with some data in a hidden div\n\n      if (measuredWidth === undefined) {\n        return {\n          dataToMeasure: nextMeasuredData\n        };\n      }\n\n      dataToMeasure = nextMeasuredData;\n    } // Once the loop is done, we should now shrink until the contents fit.\n\n\n    return tslib_1.__assign({\n      resizeDirection: 'shrink'\n    }, _shrinkContentsUntilTheyFit(dataToMeasure, onReduceData, getElementToMeasureWidth));\n  }\n  /**\r\n   * Handles an update to the container width. Should only be called when we knew the previous container width.\r\n   * @param newWidth - The new width of the container.\r\n   * @param fullWidthData - The initial data passed in as a prop to resizeGroup.\r\n   * @param renderedData - The data that was rendered prior to the container size changing.\r\n   * @param onGrowData - Set to true if the Resize group has an onGrowData function.\r\n   */\n\n\n  function _updateContainerWidth(newWidth, fullWidthData, renderedData, onGrowData) {\n    var nextState;\n\n    if (newWidth > _containerWidth) {\n      if (onGrowData) {\n        nextState = {\n          resizeDirection: 'grow',\n          dataToMeasure: onGrowData(renderedData)\n        };\n      } else {\n        nextState = {\n          resizeDirection: 'shrink',\n          dataToMeasure: fullWidthData\n        };\n      }\n    } else {\n      nextState = {\n        resizeDirection: 'shrink',\n        dataToMeasure: renderedData\n      };\n    }\n\n    _containerWidth = newWidth;\n    return tslib_1.__assign({}, nextState, {\n      measureContainer: false\n    });\n  }\n\n  function getNextState(props, currentState, getElementToMeasureWidth, newContainerWidth) {\n    // If there is no new container width or data to measure, there is no need for a new state update\n    if (newContainerWidth === undefined && currentState.dataToMeasure === undefined) {\n      return undefined;\n    }\n\n    if (newContainerWidth) {\n      // If we know what the last container size was and we rendered data at that width, we can do an optimized render\n      if (_containerWidth && currentState.renderedData && !currentState.dataToMeasure) {\n        return tslib_1.__assign({}, currentState, _updateContainerWidth(newContainerWidth, props.data, currentState.renderedData, props.onGrowData));\n      } // If we are just setting the container width for the first time, we can't do any optimizations\n\n\n      _containerWidth = newContainerWidth;\n    }\n\n    var nextState = tslib_1.__assign({}, currentState, {\n      measureContainer: false\n    });\n\n    if (currentState.dataToMeasure) {\n      if (currentState.resizeDirection === 'grow' && props.onGrowData) {\n        nextState = tslib_1.__assign({}, nextState, _growDataUntilItDoesNotFit(currentState.dataToMeasure, props.onGrowData, getElementToMeasureWidth, props.onReduceData));\n      } else {\n        nextState = tslib_1.__assign({}, nextState, _shrinkContentsUntilTheyFit(currentState.dataToMeasure, props.onReduceData, getElementToMeasureWidth));\n      }\n    }\n\n    return nextState;\n  }\n  /** Function that determines if we need to render content for measurement based on the measurement cache contents. */\n\n\n  function shouldRenderDataForMeasurement(dataToMeasure) {\n    if (!dataToMeasure || _measurementCache.getCachedMeasurement(dataToMeasure) !== undefined) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function getInitialResizeGroupState(data) {\n    return {\n      dataToMeasure: tslib_1.__assign({}, data),\n      resizeDirection: 'grow',\n      measureContainer: true\n    };\n  }\n\n  return {\n    getNextState: getNextState,\n    shouldRenderDataForMeasurement: shouldRenderDataForMeasurement,\n    getInitialResizeGroupState: getInitialResizeGroupState\n  };\n}; // Provides a context property that (if true) tells any child components that\n// they are only being used for measurement purposes and will not be visible.\n\nvar MeasuredContext = provideContext({\n  isMeasured: PropTypes.bool\n}, function () {\n  return {\n    isMeasured: true\n  };\n}); // Styles for the hidden div used for measurement\n\nvar hiddenDivStyles = {\n  position: 'fixed',\n  visibility: 'hidden'\n};\nvar hiddenParentStyles = {\n  position: 'relative'\n};\n\nvar ResizeGroupBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ResizeGroupBase, _super);\n\n  function ResizeGroupBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._nextResizeGroupStateProvider = getNextResizeGroupStateProvider(); // The root div which is the container inside of which we are trying to fit content.\n\n    _this._root = createRef(); // A div that can be used for the initial measurement so that we can avoid mounting a second instance\n    // of the component being measured for the initial render.\n\n    _this._initialHiddenDiv = createRef(); // A hidden div that is used for mounting a new instance of the component for measurement in a hidden\n    // div without unmounting the currently visible content.\n\n    _this._updateHiddenDiv = createRef(); // Tracks if any content has been rendered to the user. This enables us to do some performance optimizations\n    // for the initial render.\n\n    _this._hasRenderedContent = false;\n    _this.state = _this._nextResizeGroupStateProvider.getInitialResizeGroupState(_this.props.data);\n\n    _this._warnDeprecations({\n      styles: 'className'\n    });\n\n    return _this;\n  }\n\n  ResizeGroupBase.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        onRenderData = _a.onRenderData;\n    var _b = this.state,\n        dataToMeasure = _b.dataToMeasure,\n        renderedData = _b.renderedData;\n    var divProps = getNativeProps(this.props, divProperties, ['data']);\n\n    var dataNeedsMeasuring = this._nextResizeGroupStateProvider.shouldRenderDataForMeasurement(dataToMeasure);\n\n    var isInitialMeasure = !this._hasRenderedContent && dataNeedsMeasuring; // We only ever render the final content to the user. All measurements are done in a hidden div.\n    // For the initial render, we want this to be as fast as possible, so we need to make sure that we only mount one version of the\n    // component for measurement and the final render. For renders that update what is on screen, we want to make sure that\n    // there are no jarring effects such as the screen flashing as we apply scaling steps for meassurement. In the update case,\n    // we mount a second version of the component just for measurement purposes and leave the rendered content untouched until we know the\n    // next state sto show to the user.\n\n    return React.createElement(\"div\", tslib_1.__assign({}, divProps, {\n      className: className,\n      ref: this._root\n    }), React.createElement(\"div\", {\n      style: hiddenParentStyles\n    }, dataNeedsMeasuring && !isInitialMeasure && React.createElement(\"div\", {\n      style: hiddenDivStyles,\n      ref: this._updateHiddenDiv\n    }, React.createElement(MeasuredContext, null, onRenderData(dataToMeasure))), React.createElement(\"div\", {\n      ref: this._initialHiddenDiv,\n      style: isInitialMeasure ? hiddenDivStyles : undefined,\n      \"data-automation-id\": \"visibleContent\"\n    }, isInitialMeasure ? onRenderData(dataToMeasure) : renderedData && onRenderData(renderedData))));\n  };\n\n  ResizeGroupBase.prototype.componentDidMount = function () {\n    this._afterComponentRendered();\n\n    this._events.on(window, 'resize', this._async.debounce(this._onResize, RESIZE_DELAY, {\n      leading: true\n    }));\n  };\n\n  ResizeGroupBase.prototype.componentWillReceiveProps = function (nextProps) {\n    this.setState({\n      dataToMeasure: tslib_1.__assign({}, nextProps.data),\n      resizeDirection: 'grow',\n      measureContainer: true // Receiving new props means the parent might rerender and the root width might change\n\n    });\n  };\n\n  ResizeGroupBase.prototype.componentDidUpdate = function (prevProps) {\n    if (this.state.renderedData) {\n      this._hasRenderedContent = true;\n\n      if (this.props.dataDidRender) {\n        this.props.dataDidRender(this.state.renderedData);\n      }\n    }\n\n    this._afterComponentRendered();\n  };\n\n  ResizeGroupBase.prototype.remeasure = function () {\n    if (this._root.current) {\n      this.setState({\n        measureContainer: true\n      });\n    }\n  };\n\n  ResizeGroupBase.prototype._afterComponentRendered = function () {\n    var _this = this;\n\n    this._async.requestAnimationFrame(function () {\n      var containerWidth = undefined;\n\n      if (_this.state.measureContainer && _this._root.current) {\n        containerWidth = _this._root.current.getBoundingClientRect().width;\n      }\n\n      var nextState = _this._nextResizeGroupStateProvider.getNextState(_this.props, _this.state, function () {\n        var refToMeasure = !_this._hasRenderedContent ? _this._initialHiddenDiv : _this._updateHiddenDiv;\n        return refToMeasure.current ? refToMeasure.current.scrollWidth : 0;\n      }, containerWidth);\n\n      if (nextState) {\n        _this.setState(nextState);\n      }\n    });\n  };\n\n  ResizeGroupBase.prototype._onResize = function () {\n    if (this._root.current) {\n      this.setState({\n        measureContainer: true\n      });\n    }\n  };\n\n  return ResizeGroupBase;\n}(BaseComponent);\n\nexport { ResizeGroupBase };","map":null,"metadata":{},"sourceType":"module"}
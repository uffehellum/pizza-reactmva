{"ast":null,"code":"import { Stylesheet } from '@uifabric/merge-styles';\nvar stylesheet = Stylesheet.getInstance();\n\nif (stylesheet && stylesheet.onReset) {\n  Stylesheet.getInstance().onReset(resetMemoizations);\n}\n\nvar _resetCounter = 0;\nvar _emptyObject = {\n  empty: true\n};\nvar _dictionary = {};\n\nvar _weakMap = typeof WeakMap === 'undefined' ? null : WeakMap;\n/**\r\n *  Test utility for providing a custom weakmap.\r\n *\r\n * @internal\r\n * */\n\n\nexport function setMemoizeWeakMap(weakMap) {\n  _weakMap = weakMap;\n}\n/**\r\n * Reset memoizations.\r\n */\n\nexport function resetMemoizations() {\n  _resetCounter++;\n}\n/**\r\n * Memoize decorator to be used on class methods. Note that the \"this\" reference\r\n * will be inaccessible within a memoized method, given that a cached method's this\r\n * would not be instance specific.\r\n *\r\n * @public\r\n */\n\nexport function memoize(target, key, descriptor) {\n  // We bind to \"null\" to prevent people from inadvertently pulling values from \"this\",\n  // rather than passing them in as input values which can be memoized.\n  var fn = memoizeFunction(descriptor.value && descriptor.value.bind(null));\n  return {\n    configurable: true,\n    get: function get() {\n      return fn;\n    }\n  };\n}\n/**\r\n * Memoizes a function; when you pass in the same parameters multiple times, it returns a cached result.\r\n * Be careful when passing in objects, you need to pass in the same INSTANCE for caching to work. Otherwise\r\n * it will grow the cache unnecessarily. Also avoid using default values that evaluate functions; passing in\r\n * undefined for a value and relying on a default function will execute it the first time, but will not\r\n * re-evaluate subsequent times which may have been unexpected.\r\n *\r\n * By default, the cache will reset after 100 permutations, to avoid abuse cases where the function is\r\n * unintendedly called with unique objects. Without a reset, the cache could grow infinitely, so we safeguard\r\n * by resetting. To override this behavior, pass a value of 0 to the maxCacheSize parameter.\r\n *\r\n * @public\r\n * @param cb - The function to memoize.\r\n * @param maxCacheSize - Max results to cache. If the cache exceeds this value, it will reset on the next call.\r\n * @returns A memoized version of the function.\r\n */\n\nexport function memoizeFunction(cb, maxCacheSize) {\n  if (maxCacheSize === void 0) {\n    maxCacheSize = 100;\n  } // Avoid breaking scenarios which don't have weak map.\n\n\n  if (!_weakMap) {\n    return cb;\n  }\n\n  var rootNode;\n  var cacheSize = 0;\n  var localResetCounter = _resetCounter; // tslint:disable-next-line:no-function-expression\n\n  return function memoizedFunction() {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var currentNode = rootNode;\n\n    if (rootNode === undefined || localResetCounter !== _resetCounter || maxCacheSize > 0 && cacheSize > maxCacheSize) {\n      rootNode = _createNode();\n      cacheSize = 0;\n      localResetCounter = _resetCounter;\n    }\n\n    currentNode = rootNode; // Traverse the tree until we find the match.\n\n    for (var i = 0; i < args.length; i++) {\n      var arg = _normalizeArg(args[i]);\n\n      if (!currentNode.map.has(arg)) {\n        currentNode.map.set(arg, _createNode());\n      }\n\n      currentNode = currentNode.map.get(arg);\n    }\n\n    if (!currentNode.hasOwnProperty('value')) {\n      currentNode.value = cb.apply(void 0, args);\n      cacheSize++;\n    }\n\n    return currentNode.value;\n  };\n}\n\nfunction _normalizeArg(val) {\n  if (!val) {\n    return _emptyObject;\n  } else if (typeof val === 'object' || typeof val === 'function') {\n    return val;\n  } else if (!_dictionary[val]) {\n    _dictionary[val] = {\n      val: val\n    };\n  }\n\n  return _dictionary[val];\n}\n\nfunction _createNode() {\n  return {\n    map: _weakMap ? new _weakMap() : null\n  };\n}","map":null,"metadata":{},"sourceType":"module"}
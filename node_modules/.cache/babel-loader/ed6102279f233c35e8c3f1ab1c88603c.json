{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { anchorProperties, getNativeProps } from '../../../Utilities';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport { KeytipData } from '../../../KeytipData';\nimport { isItemDisabled, hasSubmenu } from '../../../utilities/contextualMenu/index';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\n\nvar ContextualMenuAnchor =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ContextualMenuAnchor, _super);\n\n  function ContextualMenuAnchor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._anchor = React.createRef();\n\n    _this._getSubmenuTarget = function () {\n      return _this._anchor.current ? _this._anchor.current : undefined;\n    };\n\n    _this._onItemClick = function (ev) {\n      var _a = _this.props,\n          item = _a.item,\n          onItemClick = _a.onItemClick;\n\n      if (onItemClick) {\n        onItemClick(item, ev);\n      }\n    };\n\n    return _this;\n  }\n\n  ContextualMenuAnchor.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        item = _a.item,\n        classNames = _a.classNames,\n        index = _a.index,\n        focusableElementIndex = _a.focusableElementIndex,\n        totalItemCount = _a.totalItemCount,\n        hasCheckmarks = _a.hasCheckmarks,\n        hasIcons = _a.hasIcons,\n        _b = _a.contextualMenuItemAs,\n        ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b,\n        expandedMenuItemKey = _a.expandedMenuItemKey,\n        onItemClick = _a.onItemClick,\n        openSubMenu = _a.openSubMenu,\n        dismissSubMenu = _a.dismissSubMenu,\n        dismissMenu = _a.dismissMenu;\n    var anchorRel = item.rel;\n\n    if (item.target && item.target.toLowerCase() === '_blank') {\n      anchorRel = anchorRel ? anchorRel : 'nofollow noopener noreferrer'; // Safe default to prevent tabjacking\n    }\n\n    var subMenuId = this._getSubMenuId(item);\n\n    var itemHasSubmenu = hasSubmenu(item);\n    var nativeProps = getNativeProps(item, anchorProperties);\n    var disabled = isItemDisabled(item);\n    var itemProps = item.itemProps;\n    var keytipProps = item.keytipProps;\n\n    if (keytipProps && itemHasSubmenu) {\n      keytipProps = tslib_1.__assign({}, keytipProps, {\n        hasMenu: true\n      });\n    }\n\n    return React.createElement(\"div\", null, React.createElement(KeytipData, {\n      keytipProps: item.keytipProps,\n      ariaDescribedBy: nativeProps['aria-describedby'],\n      disabled: disabled\n    }, function (keytipAttributes) {\n      return React.createElement(\"a\", tslib_1.__assign({}, nativeProps, keytipAttributes, {\n        ref: _this._anchor,\n        href: item.href,\n        target: item.target,\n        rel: anchorRel,\n        className: classNames.root,\n        role: \"menuitem\",\n        \"aria-owns\": item.key === expandedMenuItemKey ? subMenuId : undefined,\n        \"aria-haspopup\": itemHasSubmenu || undefined,\n        \"aria-expanded\": itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,\n        \"aria-posinset\": focusableElementIndex + 1,\n        \"aria-setsize\": totalItemCount,\n        \"aria-disabled\": isItemDisabled(item),\n        style: item.style,\n        onClick: _this._onItemClick,\n        onMouseEnter: _this._onItemMouseEnter,\n        onMouseLeave: _this._onItemMouseLeave,\n        onKeyDown: itemHasSubmenu ? _this._onItemKeyDown : null\n      }), React.createElement(ChildrenRenderer, tslib_1.__assign({\n        componentRef: item.componentRef,\n        item: item,\n        classNames: classNames,\n        index: index,\n        onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : undefined,\n        hasIcons: hasIcons,\n        openSubMenu: openSubMenu,\n        dismissSubMenu: dismissSubMenu,\n        dismissMenu: dismissMenu,\n        getSubmenuTarget: _this._getSubmenuTarget\n      }, itemProps)));\n    }));\n  };\n\n  return ContextualMenuAnchor;\n}(ContextualMenuItemWrapper);\n\nexport { ContextualMenuAnchor };","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\r\n * Storing global state in local module variables has issues when more than one copy\r\n * if the module gets loaded on the page (due to a bundling error or simply by consuming\r\n * a prebundled script.)\r\n *\r\n * This file contains helpers to deal with the getting and setting local state, and allows\r\n * callers to get called back when it mutates.\r\n */\nvar GLOBAL_SETTINGS_PROP_NAME = '__globalSettings__';\nvar CALLBACK_STATE_PROP_NAME = '__callbacks__'; // tslint:disable-next-line:no-any\n\nvar _global;\n\nvar _counter = 0;\n\nif (typeof window !== 'undefined') {\n  _global = window;\n} else if (typeof global !== 'undefined') {\n  _global = global;\n} else {\n  _global = {};\n} // tslint:disable-next-line:no-any\n\n\nvar _globalSettings = _global[GLOBAL_SETTINGS_PROP_NAME] = _global[GLOBAL_SETTINGS_PROP_NAME] || (_a = {}, _a[CALLBACK_STATE_PROP_NAME] = {}, _a);\n\nvar _callbacks = _globalSettings[CALLBACK_STATE_PROP_NAME];\n/**\r\n * Global settings helper, which stores settings in the global (window) namespace.\r\n * If window is not provided, it will store settings in module scope. Provides a\r\n * way to observe changes as well when their values change.\r\n *\r\n * @public\r\n */\n\nvar GlobalSettings =\n/** @class */\nfunction () {\n  function GlobalSettings() {}\n\n  GlobalSettings.getValue = function (key, defaultValue) {\n    if (_globalSettings[key] === undefined) {\n      _globalSettings[key] = typeof defaultValue === 'function' ? defaultValue() : defaultValue;\n    }\n\n    return _globalSettings[key];\n  };\n\n  GlobalSettings.setValue = function (key, value) {\n    var oldValue = _globalSettings[key];\n\n    if (value !== oldValue) {\n      _globalSettings[key] = value;\n      var changeDescription = {\n        oldValue: oldValue,\n        value: value,\n        key: key\n      };\n\n      for (var id in _callbacks) {\n        if (_callbacks.hasOwnProperty(id)) {\n          _callbacks[id](changeDescription);\n        }\n      }\n    }\n\n    return value;\n  };\n\n  GlobalSettings.addChangeListener = function (cb) {\n    // Note: we use generated ids on the callbacks to create a map of the callbacks, which optimizes removal.\n    // (It's faster to delete a key than it is to look up the index of an object and splice an array.)\n    var id = cb.__id__;\n\n    if (!id) {\n      id = cb.__id__ = String(_counter++);\n    }\n\n    _callbacks[id] = cb;\n  };\n\n  GlobalSettings.removeChangeListener = function (cb) {\n    delete _callbacks[cb.__id__];\n  };\n\n  return GlobalSettings;\n}();\n\nexport { GlobalSettings };\n\nvar _a;","map":null,"metadata":{},"sourceType":"module"}
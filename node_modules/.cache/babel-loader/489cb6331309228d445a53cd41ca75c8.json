{"ast":null,"code":"/* tslint:disable:no-string-literal */\nimport { assign } from './object';\n/** An instance of EventGroup allows anything with a handle to it to trigger events on it.\r\n *  If the target is an HTMLElement, the event will be attached to the element and can be\r\n *  triggered as usual (like clicking for onclick).\r\n *  The event can be triggered by calling EventGroup.raise() here. If the target is an\r\n *  HTMLElement, the event gets raised and is handled by the browser. Otherwise, it gets\r\n *  handled here in EventGroup, and the handler is called in the context of the parent\r\n *  (which is passed in in the constructor).\r\n *\r\n * @public\r\n */\n\nvar EventGroup =\n/** @class */\nfunction () {\n  /** parent: the context in which events attached to non-HTMLElements are called */\n  // tslint:disable-next-line:no-any\n  function EventGroup(parent) {\n    this._id = EventGroup._uniqueId++;\n    this._parent = parent;\n    this._eventRecords = [];\n  }\n  /** For IE8, bubbleEvent is ignored here and must be dealt with by the handler.\r\n   *  Events raised here by default have bubbling set to false and cancelable set to true.\r\n   *  This applies also to built-in events being raised manually here on HTMLElements,\r\n   *  which may lead to unexpected behavior if it differs from the defaults.\r\n   *\r\n   */\n\n\n  EventGroup.raise = function ( // tslint:disable-next-line:no-any\n  target, eventName, // tslint:disable-next-line:no-any\n  eventArgs, bubbleEvent) {\n    var retVal;\n\n    if (EventGroup._isElement(target)) {\n      if (document.createEvent) {\n        var ev = document.createEvent('HTMLEvents');\n        ev.initEvent(eventName, bubbleEvent || false, true);\n        assign(ev, eventArgs);\n        retVal = target.dispatchEvent(ev); // tslint:disable-next-line:no-any\n      } else if (document['createEventObject']) {\n        // IE8\n        // tslint:disable-next-line:no-any\n        var evObj = document['createEventObject'](eventArgs); // cannot set cancelBubble on evObj, fireEvent will overwrite it\n\n        target.fireEvent('on' + eventName, evObj);\n      }\n    } else {\n      while (target && retVal !== false) {\n        var events = target.__events__;\n        var eventRecords = events ? events[eventName] : null;\n\n        if (eventRecords) {\n          for (var id in eventRecords) {\n            if (eventRecords.hasOwnProperty(id)) {\n              var eventRecordList = eventRecords[id];\n\n              for (var listIndex = 0; retVal !== false && listIndex < eventRecordList.length; listIndex++) {\n                var record = eventRecordList[listIndex];\n\n                if (record.objectCallback) {\n                  retVal = record.objectCallback.call(record.parent, eventArgs);\n                }\n              }\n            }\n          }\n        } // If the target has a parent, bubble the event up.\n\n\n        target = bubbleEvent ? target.parent : null;\n      }\n    }\n\n    return retVal;\n  }; // tslint:disable-next-line:no-any\n\n\n  EventGroup.isObserved = function (target, eventName) {\n    var events = target && target.__events__;\n    return !!events && !!events[eventName];\n  };\n  /** Check to see if the target has declared support of the given event. */\n  // tslint:disable-next-line:no-any\n\n\n  EventGroup.isDeclared = function (target, eventName) {\n    var declaredEvents = target && target.__declaredEvents;\n    return !!declaredEvents && !!declaredEvents[eventName];\n  }; // tslint:disable-next-line:no-any\n\n\n  EventGroup.stopPropagation = function (event) {\n    if (event.stopPropagation) {\n      event.stopPropagation();\n    } else {\n      // IE8\n      event.cancelBubble = true;\n    }\n  };\n\n  EventGroup._isElement = function (target) {\n    return !!target && (!!target.addEventListener || typeof HTMLElement !== 'undefined' && target instanceof HTMLElement);\n  };\n\n  EventGroup.prototype.dispose = function () {\n    if (!this._isDisposed) {\n      this._isDisposed = true;\n      this.off();\n      this._parent = null;\n    }\n  };\n  /** On the target, attach a set of events, where the events object is a name to function mapping. */\n  // tslint:disable-next-line:no-any\n\n\n  EventGroup.prototype.onAll = function (target, events, useCapture) {\n    for (var eventName in events) {\n      if (events.hasOwnProperty(eventName)) {\n        this.on(target, eventName, events[eventName], useCapture);\n      }\n    }\n  };\n  /** On the target, attach an event whose handler will be called in the context of the parent\r\n   * of this instance of EventGroup.\r\n   */\n  // tslint:disable-next-line:no-any\n\n\n  EventGroup.prototype.on = function (target, eventName, callback, useCapture) {\n    var _this = this;\n\n    if (eventName.indexOf(',') > -1) {\n      var events = eventName.split(/[ ,]+/);\n\n      for (var i = 0; i < events.length; i++) {\n        this.on(target, events[i], callback, useCapture);\n      }\n    } else {\n      var parent_1 = this._parent;\n      var eventRecord = {\n        target: target,\n        eventName: eventName,\n        parent: parent_1,\n        callback: callback,\n        useCapture: useCapture || false\n      }; // Initialize and wire up the record on the target, so that it can call the callback if the event fires.\n\n      var events = target.__events__ = target.__events__ || {};\n      events[eventName] = events[eventName] || {\n        count: 0\n      };\n      events[eventName][this._id] = events[eventName][this._id] || [];\n\n      events[eventName][this._id].push(eventRecord);\n\n      events[eventName].count++;\n\n      if (EventGroup._isElement(target)) {\n        // tslint:disable-next-line:no-any\n        var processElementEvent = function processElementEvent() {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          if (_this._isDisposed) {\n            return;\n          }\n\n          var result;\n\n          try {\n            result = callback.apply(parent_1, args);\n\n            if (result === false && args[0]) {\n              var e = args[0];\n\n              if (e.preventDefault) {\n                e.preventDefault();\n              }\n\n              if (e.stopPropagation) {\n                e.stopPropagation();\n              }\n\n              e.cancelBubble = true;\n            }\n          } catch (e) {\n            /* ErrorHelper.log(e); */\n          }\n\n          return result;\n        };\n\n        eventRecord.elementCallback = processElementEvent;\n\n        if (target.addEventListener) {\n          /* tslint:disable:ban-native-functions */\n          target.addEventListener(eventName, processElementEvent, useCapture);\n          /* tslint:enable:ban-native-functions */\n        } else if (target.attachEvent) {\n          // IE8\n          target.attachEvent('on' + eventName, processElementEvent);\n        }\n      } else {\n        // tslint:disable-next-line:no-any\n        var processObjectEvent = function processObjectEvent() {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          if (_this._isDisposed) {\n            return;\n          }\n\n          return callback.apply(parent_1, args);\n        };\n\n        eventRecord.objectCallback = processObjectEvent;\n      } // Remember the record locally, so that it can be removed.\n\n\n      this._eventRecords.push(eventRecord);\n    }\n  }; // tslint:disable-next-line:no-any\n\n\n  EventGroup.prototype.off = function (target, eventName, callback, useCapture) {\n    for (var i = 0; i < this._eventRecords.length; i++) {\n      var eventRecord = this._eventRecords[i];\n\n      if ((!target || target === eventRecord.target) && (!eventName || eventName === eventRecord.eventName) && (!callback || callback === eventRecord.callback) && (typeof useCapture !== 'boolean' || useCapture === eventRecord.useCapture)) {\n        var events = eventRecord.target.__events__;\n        var targetArrayLookup = events[eventRecord.eventName];\n        var targetArray = targetArrayLookup ? targetArrayLookup[this._id] : null; // We may have already target's entries, so check for null.\n\n        if (targetArray) {\n          if (targetArray.length === 1 || !callback) {\n            targetArrayLookup.count -= targetArray.length;\n            delete events[eventRecord.eventName][this._id];\n          } else {\n            targetArrayLookup.count--;\n            targetArray.splice(targetArray.indexOf(eventRecord), 1);\n          }\n\n          if (!targetArrayLookup.count) {\n            delete events[eventRecord.eventName];\n          }\n        }\n\n        if (eventRecord.elementCallback) {\n          if (eventRecord.target.removeEventListener) {\n            eventRecord.target.removeEventListener(eventRecord.eventName, eventRecord.elementCallback, eventRecord.useCapture);\n          } else if (eventRecord.target.detachEvent) {\n            // IE8\n            eventRecord.target.detachEvent('on' + eventRecord.eventName, eventRecord.elementCallback);\n          }\n        }\n\n        this._eventRecords.splice(i--, 1);\n      }\n    }\n  };\n  /** Trigger the given event in the context of this instance of EventGroup. */\n  // tslint:disable-next-line:no-any\n\n\n  EventGroup.prototype.raise = function (eventName, eventArgs, bubbleEvent) {\n    return EventGroup.raise(this._parent, eventName, eventArgs, bubbleEvent);\n  };\n  /** Declare an event as being supported by this instance of EventGroup. */\n\n\n  EventGroup.prototype.declare = function (event) {\n    var declaredEvents = this._parent.__declaredEvents = this._parent.__declaredEvents || {};\n\n    if (typeof event === 'string') {\n      declaredEvents[event] = true;\n    } else {\n      for (var i = 0; i < event.length; i++) {\n        declaredEvents[event[i]] = true;\n      }\n    }\n  }; // tslint:disable-next-line:no-inferrable-types\n\n\n  EventGroup._uniqueId = 0;\n  return EventGroup;\n}();\n\nexport { EventGroup };","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { AnimationClassNames, FontSizes, getGlobalClassNames, HighContrastSelector, normalize } from '../../Styling';\nvar globalClassNames = {\n  root: 'ms-TextField',\n  description: 'ms-TextField-description',\n  errorMessage: 'ms-TextField-errorMessage',\n  field: 'ms-TextField-field',\n  fieldGroup: 'ms-TextField-fieldGroup',\n  prefix: 'ms-TextField-prefix',\n  suffix: 'ms-TextField-suffix',\n  wrapper: 'ms-TextField-wrapper',\n  multiline: 'ms-TextField--multiline',\n  borderless: 'ms-TextField--borderless',\n  underlined: 'ms-TextField--underlined',\n  unresizable: 'ms-TextField--unresizable',\n  required: 'is-required',\n  disabled: 'is-disabled',\n  active: 'is-active'\n};\n\nfunction getLabelStyles(props) {\n  var underlined = props.underlined,\n      disabled = props.disabled;\n  return function () {\n    return {\n      root: [underlined && disabled && {\n        color: props.theme.palette.neutralTertiary\n      }, underlined && {\n        fontSize: FontSizes.medium,\n        marginRight: 8,\n        paddingLeft: 12,\n        paddingRight: 0,\n        lineHeight: '22px',\n        height: 32\n      }]\n    };\n  };\n}\n\nexport function getStyles(props) {\n  var theme = props.theme,\n      className = props.className,\n      disabled = props.disabled,\n      focused = props.focused,\n      required = props.required,\n      multiline = props.multiline,\n      hasLabel = props.hasLabel,\n      borderless = props.borderless,\n      underlined = props.underlined,\n      hasIcon = props.hasIcon,\n      resizable = props.resizable,\n      hasErrorMessage = props.hasErrorMessage,\n      iconClass = props.iconClass,\n      inputClassName = props.inputClassName,\n      autoAdjustHeight = props.autoAdjustHeight;\n  var semanticColors = theme.semanticColors,\n      palette = theme.palette;\n  var classNames = getGlobalClassNames(globalClassNames, theme);\n  var fieldPrefixSuffix = {\n    background: palette.neutralLighter,\n    color: palette.neutralSecondary,\n    display: 'flex',\n    alignItems: 'center',\n    padding: '0 10px',\n    lineHeight: 1,\n    whiteSpace: 'nowrap'\n  };\n  return {\n    root: [classNames.root, required && classNames.required, disabled && classNames.disabled, focused && classNames.active, multiline && classNames.multiline, borderless && classNames.borderless, underlined && classNames.underlined, normalize, {\n      position: 'relative',\n      selectors: (_a = {}, _a[HighContrastSelector] = {\n        borderWidth: 2\n      }, _a)\n    }, focused && {\n      borderColor: semanticColors.inputFocusBorderAlt\n    }, underlined && !focused && {\n      border: \"0px solid \" + semanticColors.inputBorder\n    }, underlined && !disabled && !focused && {\n      selectors: {\n        ':hover': {\n          borderColor: semanticColors.inputBorderHovered\n        }\n      }\n    }, className],\n    wrapper: [classNames.wrapper, underlined && {\n      display: 'flex',\n      borderBottomWidth: 1,\n      borderBottomStyle: 'solid',\n      borderBottomColor: 'inherit',\n      width: '100%'\n    }, hasErrorMessage && {\n      borderColor: semanticColors.errorText,\n      selectors: {\n        '&:focus, &:hover': {\n          borderColor: semanticColors.errorText\n        }\n      }\n    }, hasErrorMessage && underlined && !disabled && {\n      borderBottom: \"1px solid \" + semanticColors.errorText,\n      selectors: {\n        ':focus': {\n          borderBottom: \"1px solid \" + semanticColors.errorText\n        },\n        ':hover': {\n          borderBottom: \"1px solid \" + semanticColors.errorText\n        }\n      }\n    }, underlined && disabled && {\n      borderBottomColor: semanticColors.disabledBackground\n    }, underlined && !disabled && {\n      selectors: {\n        ':hover': {\n          selectors: (_b = {}, _b[HighContrastSelector] = {\n            borderColor: 'Highlight'\n          }, _b)\n        }\n      }\n    }, underlined && focused && {\n      selectors: (_c = {}, _c[HighContrastSelector] = {\n        borderColor: 'Highlight'\n      }, _c)\n    }],\n    fieldGroup: [classNames.fieldGroup, normalize, {\n      border: \"1px solid \" + semanticColors.inputBorder,\n      background: semanticColors.bodyBackground,\n      height: 32,\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'stretch',\n      position: 'relative',\n      selectors: {\n        ':hover': {\n          selectors: (_d = {}, _d[HighContrastSelector] = {\n            borderColor: 'Highlight'\n          }, _d)\n        }\n      }\n    }, multiline && {\n      minHeight: '60px',\n      height: 'auto',\n      display: 'flex'\n    }, borderless && {\n      borderColor: 'transparent',\n      borderWidth: 0\n    }, !focused && !disabled && {\n      selectors: {\n        ':hover': {\n          borderColor: semanticColors.inputBorderHovered\n        }\n      }\n    }, focused && {\n      borderColor: semanticColors.inputFocusBorderAlt,\n      selectors: (_e = {}, _e[HighContrastSelector] = {\n        borderWidth: 2,\n        borderColor: 'Highlight'\n      }, _e)\n    }, disabled && {\n      backgroundColor: semanticColors.disabledBackground,\n      borderColor: semanticColors.disabledBackground\n    }, underlined && {\n      flex: '1 1 0px',\n      borderWidth: 0,\n      textAlign: 'left'\n    }, underlined && disabled && {\n      backgroundColor: 'transparent'\n    }, hasErrorMessage && {\n      borderColor: semanticColors.errorText,\n      selectors: {\n        '&:focus, &:hover': {\n          borderColor: semanticColors.errorText\n        }\n      }\n    }, hasErrorMessage && focused && {\n      borderColor: semanticColors.errorText\n    }, !hasLabel && required && {\n      selectors: {\n        ':after': {\n          content: \"'*'\",\n          color: semanticColors.errorText,\n          position: 'absolute',\n          top: -5,\n          right: -10\n        }\n      }\n    }],\n    field: [classNames.field, normalize, {\n      fontSize: FontSizes.medium,\n      borderRadius: 0,\n      border: 'none',\n      background: 'none',\n      backgroundColor: 'transparent',\n      color: semanticColors.bodyText,\n      padding: '0 12px',\n      width: '100%',\n      minWidth: 0,\n      textOverflow: 'ellipsis',\n      outline: 0,\n      selectors: {\n        '&:active, &:focus, &:hover': {\n          outline: 0\n        },\n        '::-ms-clear': {\n          display: 'none'\n        },\n        '::placeholder': {\n          color: semanticColors.inputPlaceholderText,\n          opacity: 1\n        },\n        ':-ms-input-placeholder': {\n          color: semanticColors.inputPlaceholderText,\n          opacity: 1\n        }\n      }\n    }, multiline && !resizable && [classNames.unresizable, {\n      resize: 'none'\n    }], multiline && {\n      minHeight: 'inherit',\n      lineHeight: 17,\n      flexGrow: 1,\n      paddingTop: 6,\n      overflow: 'auto',\n      width: '100%'\n    }, multiline && autoAdjustHeight && {\n      overflow: 'hidden'\n    }, hasIcon && {\n      paddingRight: 24\n    }, multiline && hasIcon && {\n      paddingRight: 40\n    }, disabled && {\n      backgroundColor: 'transparent',\n      borderColor: 'transparent'\n    }, underlined && {\n      textAlign: 'left'\n    }, underlined && disabled && {\n      backgroundColor: 'transparent',\n      color: semanticColors.disabledText\n    }, focused && {\n      selectors: (_f = {}, _f[HighContrastSelector] = {\n        padding: '0 11px 0 11px'\n      }, _f)\n    }, inputClassName],\n    icon: [multiline && {\n      paddingRight: 24,\n      paddingBottom: 8,\n      alignItems: 'flex-end'\n    }, {\n      pointerEvents: 'none',\n      position: 'absolute',\n      bottom: 5,\n      right: 8,\n      top: 'auto',\n      fontSize: 16,\n      lineHeight: 18\n    }, iconClass],\n    description: [classNames.description, {\n      color: semanticColors.bodySubtext,\n      fontSize: FontSizes.xSmall\n    }],\n    errorMessage: [classNames.errorMessage, AnimationClassNames.slideDownIn20, theme.fonts.small, {\n      color: semanticColors.errorText,\n      margin: 0,\n      paddingTop: 5,\n      display: 'flex',\n      alignItems: 'center'\n    }],\n    prefix: [classNames.prefix, fieldPrefixSuffix],\n    suffix: [classNames.suffix, fieldPrefixSuffix],\n    subComponentStyles: {\n      label: getLabelStyles(props)\n    }\n  };\n\n  var _a, _b, _c, _d, _e, _f;\n}","map":null,"metadata":{},"sourceType":"module"}
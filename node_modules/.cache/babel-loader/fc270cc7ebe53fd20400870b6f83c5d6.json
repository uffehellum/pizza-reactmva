{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nexport var InjectionMode = {\n  /**\r\n   * Avoids style injection, use getRules() to read the styles.\r\n   */\n  none: 0,\n\n  /**\r\n   * Inserts rules using the insertRule api.\r\n   */\n  insertNode: 1,\n\n  /**\r\n   * Appends rules using appendChild.\r\n   */\n  appendChild: 2\n};\nvar STYLESHEET_SETTING = '__stylesheet__'; // tslint:disable-next-line:no-any\n\nvar _fileScopedGlobal = {};\n\nvar _stylesheet;\n/**\r\n * Represents the state of styles registered in the page. Abstracts\r\n * the surface for adding styles to the stylesheet, exposes helpers\r\n * for reading the styles registered in server rendered scenarios.\r\n *\r\n * @public\r\n */\n\n\nvar Stylesheet =\n/** @class */\nfunction () {\n  function Stylesheet(config) {\n    this._rules = [];\n    this._preservedRules = [];\n    this._rulesToInsert = [];\n    this._counter = 0;\n    this._keyToClassName = {};\n    this._onResetCallbacks = []; // tslint:disable-next-line:no-any\n\n    this._classNameToArgs = {};\n    this._config = tslib_1.__assign({\n      injectionMode: InjectionMode.insertNode,\n      defaultPrefix: 'css',\n      namespace: undefined\n    }, config);\n  }\n  /**\r\n   * Gets the singleton instance.\r\n   */\n\n\n  Stylesheet.getInstance = function () {\n    // tslint:disable-next-line:no-any\n    var global = typeof window !== 'undefined' ? window : typeof process !== 'undefined' ? process : _fileScopedGlobal;\n    _stylesheet = global[STYLESHEET_SETTING];\n\n    if (!_stylesheet || _stylesheet._lastStyleElement && _stylesheet._lastStyleElement.ownerDocument !== document) {\n      // tslint:disable-next-line:no-string-literal\n      var fabricConfig = global && global['FabricConfig'] || {};\n      _stylesheet = global[STYLESHEET_SETTING] = new Stylesheet(fabricConfig.mergeStyles);\n    }\n\n    return _stylesheet;\n  };\n  /**\r\n   * Configures the stylesheet.\r\n   */\n\n\n  Stylesheet.prototype.setConfig = function (config) {\n    this._config = tslib_1.__assign({}, this._config, config);\n  };\n  /**\r\n   * Configures a reset callback.\r\n   *\r\n   * @param callback - A callback which will be called when the Stylesheet is reset.\r\n   */\n\n\n  Stylesheet.prototype.onReset = function (callback) {\n    this._onResetCallbacks.push(callback);\n  };\n  /**\r\n   * Generates a unique classname.\r\n   *\r\n   * @param displayName - Optional value to use as a prefix.\r\n   */\n\n\n  Stylesheet.prototype.getClassName = function (displayName) {\n    var namespace = this._config.namespace;\n    var prefix = displayName || this._config.defaultPrefix;\n    return \"\" + (namespace ? namespace + '-' : '') + prefix + \"-\" + this._counter++;\n  };\n  /**\r\n   * Used internally to cache information about a class which was\r\n   * registered with the stylesheet.\r\n   */\n\n\n  Stylesheet.prototype.cacheClassName = function (className, key, args, rules) {\n    this._keyToClassName[key] = className;\n    this._classNameToArgs[className] = {\n      args: args,\n      rules: rules\n    };\n  };\n  /**\r\n   * Gets the appropriate classname given a key which was previously\r\n   * registered using cacheClassName.\r\n   */\n\n\n  Stylesheet.prototype.classNameFromKey = function (key) {\n    return this._keyToClassName[key];\n  };\n  /**\r\n   * Gets the arguments associated with a given classname which was\r\n   * previously registered using cacheClassName.\r\n   */\n\n\n  Stylesheet.prototype.argsFromClassName = function (className) {\n    var entry = this._classNameToArgs[className];\n    return entry && entry.args;\n  };\n  /**\r\n   * Gets the arguments associated with a given classname which was\r\n   * previously registered using cacheClassName.\r\n   */\n\n\n  Stylesheet.prototype.insertedRulesFromClassName = function (className) {\n    var entry = this._classNameToArgs[className];\n    return entry && entry.rules;\n  };\n  /**\r\n   * Inserts a css rule into the stylesheet.\r\n   * @param preserve - Preserves the rule beyond a reset boundary.\r\n   */\n\n\n  Stylesheet.prototype.insertRule = function (rule, preserve) {\n    var injectionMode = this._config.injectionMode;\n    var element = injectionMode !== InjectionMode.none ? this._getStyleElement() : undefined;\n\n    if (preserve) {\n      this._preservedRules.push(rule);\n    }\n\n    if (element) {\n      switch (this._config.injectionMode) {\n        case InjectionMode.insertNode:\n          var sheet = element.sheet;\n\n          try {\n            sheet.insertRule(rule, sheet.cssRules.length);\n          } catch (e) {// The browser will throw exceptions on unsupported rules (such as a moz prefix in webkit.)\n            // We need to swallow the exceptions for this scenario, otherwise we'd need to filter\n            // which could be slower and bulkier.\n          }\n\n          break;\n\n        case InjectionMode.appendChild:\n          element.appendChild(document.createTextNode(rule));\n          break;\n      }\n    } else {\n      this._rules.push(rule);\n    }\n\n    if (this._config.onInsertRule) {\n      this._config.onInsertRule(rule);\n    }\n  };\n  /**\r\n   * Gets all rules registered with the stylesheet; only valid when\r\n   * using InsertionMode.none.\r\n   */\n\n\n  Stylesheet.prototype.getRules = function (includePreservedRules) {\n    return (includePreservedRules ? this._preservedRules.join('') : '') + this._rules.join('') + this._rulesToInsert.join('');\n  };\n  /**\r\n   * Resets the internal state of the stylesheet. Only used in server\r\n   * rendered scenarios where we're using InsertionMode.none.\r\n   */\n\n\n  Stylesheet.prototype.reset = function () {\n    this._rules = [];\n    this._rulesToInsert = [];\n    this._counter = 0;\n    this._classNameToArgs = {};\n    this._keyToClassName = {};\n\n    this._onResetCallbacks.forEach(function (callback) {\n      return callback();\n    });\n  }; // Forces the regeneration of incoming styles without totally resetting the stylesheet.\n\n\n  Stylesheet.prototype.resetKeys = function () {\n    this._keyToClassName = {};\n  };\n\n  Stylesheet.prototype._getStyleElement = function () {\n    var _this = this;\n\n    if (!this._styleElement && typeof document !== 'undefined') {\n      this._styleElement = this._createStyleElement(); // Reset the style element on the next frame.\n\n      window.requestAnimationFrame(function () {\n        _this._styleElement = undefined;\n      });\n    }\n\n    return this._styleElement;\n  };\n\n  Stylesheet.prototype._createStyleElement = function () {\n    var styleElement = document.createElement('style');\n    styleElement.setAttribute('data-merge-styles', 'true');\n    styleElement.type = 'text/css';\n\n    if (this._lastStyleElement && this._lastStyleElement.nextElementSibling) {\n      document.head.insertBefore(styleElement, this._lastStyleElement.nextElementSibling);\n    } else {\n      document.head.appendChild(styleElement);\n    }\n\n    this._lastStyleElement = styleElement;\n    return styleElement;\n  };\n\n  return Stylesheet;\n}();\n\nexport { Stylesheet };","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Stylesheet } from '@uifabric/merge-styles'; // Initialize global window id.\n\nvar CURRENT_ID_PROPERTY = '__currentId__';\nvar DEFAULT_ID_STRING = 'id__'; // tslint:disable-next-line:no-any\n\nvar _global = typeof window !== 'undefined' && window || process;\n\nif (_global[CURRENT_ID_PROPERTY] === undefined) {\n  _global[CURRENT_ID_PROPERTY] = 0;\n} // tslint:disable-next-line:no-any\n\n\nfunction checkProperties(a, b) {\n  for (var propName in a) {\n    if (a.hasOwnProperty(propName)) {\n      if (!b.hasOwnProperty(propName) || b[propName] !== a[propName]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n/**\r\n * Compares a to b and b to a.\r\n *\r\n * @public\r\n */\n\n\nexport function shallowCompare(a, b) {\n  return checkProperties(a, b) && checkProperties(b, a);\n}\n/**\r\n * Makes a resulting merge of a bunch of objects. Pass in the target object followed by 1 or more\r\n * objects as arguments and they will be merged sequentially into the target. Note that this will\r\n * shallow merge; it will not create new cloned values for target members.\r\n *\r\n * @public\r\n * @param target - Target object to merge following object arguments into.\r\n * @param args - One or more objects that will be mixed into the target in the order they are provided.\r\n * @returns Resulting merged target.\r\n */\n// tslint:disable-next-line:no-any\n\nexport function assign(target) {\n  var args = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n\n  return filteredAssign.apply(this, [null, target].concat(args));\n}\n/**\r\n * Makes a resulting merge of a bunch of objects, but allows a filter function to be passed in to filter\r\n * the resulting merges. This allows for scenarios where you want to merge \"everything except that one thing\"\r\n * or \"properties that start with data-\". Note that this will shallow merge; it will not create new cloned\r\n * values for target members.\r\n *\r\n * @public\r\n * @param isAllowed - Callback to determine if the given propName is allowed in the result.\r\n * @param target - Target object to merge following object arguments into.\r\n * @param args - One or more objects that will be mixed into the target in the order they are provided.\r\n * @returns Resulting merged target.\r\n */\n// tslint:disable-next-line:no-any\n\nexport function filteredAssign(isAllowed, target) {\n  var args = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n\n  target = target || {};\n\n  for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {\n    var sourceObject = args_1[_a];\n\n    if (sourceObject) {\n      for (var propName in sourceObject) {\n        if (sourceObject.hasOwnProperty(propName) && (!isAllowed || isAllowed(propName))) {\n          target[propName] = sourceObject[propName];\n        }\n      }\n    }\n  }\n\n  return target;\n} // Configure ids to reset on stylesheet resets.\n\nvar stylesheet = Stylesheet.getInstance();\n\nif (stylesheet && stylesheet.onReset) {\n  stylesheet.onReset(resetIds);\n}\n/**\r\n * Generates a unique id in the global scope (this spans across duplicate copies of the same library.)\r\n *\r\n * @public\r\n */\n\n\nexport function getId(prefix) {\n  var index = _global[CURRENT_ID_PROPERTY]++;\n  return (prefix || DEFAULT_ID_STRING) + index;\n}\n/**\r\n * Resets id counter to an (optional) number.\r\n *\r\n * @public\r\n */\n\nexport function resetIds(counter) {\n  if (counter === void 0) {\n    counter = 0;\n  }\n\n  _global[CURRENT_ID_PROPERTY] = counter;\n}\n/* Takes an enum and iterates over each value of the enum (as a string), running the callback on each, returning a mapped array.\r\n * The callback takes as a first parameter the string that represents the name of the entry, and the second parameter is the\r\n * value of that entry, which is the value you'd normally use when using the enum (usually a number).\r\n * */\n\nexport function mapEnumByName( // tslint:disable-next-line:no-any\ntheEnum, callback) {\n  // map<any> to satisfy compiler since it doesn't realize we strip out undefineds in the .filter() call\n  return Object.keys(theEnum).map(function (p) {\n    // map on each property name as a string\n    if (String(Number(p)) !== p) {\n      // if the property is not just a number (because enums in TypeScript will map both ways)\n      return callback(p, theEnum[p]);\n    }\n  }).filter(function (v) {\n    return !!v;\n  }); // only return elements with values\n}\n/**\r\n * Get all values in an object dictionary\r\n *\r\n * @param obj - The dictionary to get values for\r\n */\n// tslint:disable-next-line:no-any\n\nexport function values(obj) {\n  return Object.keys(obj).reduce(function (arr, key) {\n    arr.push(obj[key]);\n    return arr;\n  }, []);\n}","map":null,"metadata":{},"sourceType":"module"}
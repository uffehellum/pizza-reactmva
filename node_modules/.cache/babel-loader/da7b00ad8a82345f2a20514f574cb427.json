{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { BaseComponent, css, nullRender } from '../../Utilities';\nimport { OverflowSet } from '../../OverflowSet';\nimport { ResizeGroup } from '../../ResizeGroup';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { classNamesFunction } from '../../Utilities';\nimport { CommandBarButton } from '../../Button';\nimport { TooltipHost } from '../../Tooltip';\nvar getClassNames = classNamesFunction();\n\nvar CommandBarBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(CommandBarBase, _super);\n\n  function CommandBarBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._overflowSet = React.createRef();\n    _this._resizeGroup = React.createRef();\n\n    _this._onRenderData = function (data) {\n      return React.createElement(FocusZone, {\n        className: css(_this._classNames.root),\n        direction: FocusZoneDirection.horizontal,\n        role: 'menubar',\n        \"aria-label\": _this.props.ariaLabel\n      }, React.createElement(OverflowSet, {\n        componentRef: _this._resolveRef('_overflowSet'),\n        className: css(_this._classNames.primarySet),\n        doNotContainWithinFocusZone: true,\n        role: 'presentation',\n        items: data.primaryItems,\n        overflowItems: data.overflowItems.length ? data.overflowItems : undefined,\n        onRenderItem: _this._onRenderItem,\n        onRenderOverflowButton: _this._onRenderOverflowButton\n      }), data.farItems && React.createElement(OverflowSet, {\n        className: css(_this._classNames.secondarySet),\n        doNotContainWithinFocusZone: true,\n        role: 'presentation',\n        items: data.farItems,\n        onRenderItem: _this._onRenderItem,\n        onRenderOverflowButton: nullRender\n      }));\n    };\n\n    _this._onRenderItem = function (item) {\n      var CommandButtonType = _this.props.buttonAs || item.commandBarButtonAs || CommandBarButton;\n      var itemText = item.text || item.name;\n\n      if (item.onRender) {\n        // These are the top level items, there is no relevant menu dismissing function to\n        // provide for the IContextualMenuItem onRender function. Pass in a no op function instead.\n        return item.onRender(item, function () {\n          return undefined;\n        });\n      }\n\n      var commandButtonProps = tslib_1.__assign({\n        allowDisabledFocus: true,\n        role: 'menuitem'\n      }, item, {\n        styles: tslib_1.__assign({\n          root: {\n            height: '100%'\n          },\n          label: {\n            whiteSpace: 'nowrap'\n          }\n        }, item.buttonStyles),\n        className: css('ms-CommandBarItem-link', item.className),\n        text: !item.iconOnly ? itemText : undefined,\n        menuProps: item.subMenuProps,\n        onClick: _this._onButtonClick(item)\n      });\n\n      if (item.iconOnly && itemText !== undefined) {\n        return React.createElement(TooltipHost, tslib_1.__assign({\n          content: itemText\n        }, item.tooltipHostProps), React.createElement(CommandButtonType, tslib_1.__assign({}, commandButtonProps, {\n          defaultRender: CommandBarButton\n        })));\n      }\n\n      return React.createElement(CommandButtonType, tslib_1.__assign({}, commandButtonProps, {\n        defaultRender: CommandBarButton\n      }));\n    };\n\n    _this._onRenderOverflowButton = function (overflowItems) {\n      var _a = _this.props,\n          _b = _a.overflowButtonAs,\n          OverflowButtonType = _b === void 0 ? CommandBarButton : _b,\n          _c = _a.overflowButtonProps // assure that props is not empty\n      ,\n          overflowButtonProps = _c === void 0 ? {} : _c // assure that props is not empty\n      ;\n      var combinedOverflowItems = (overflowButtonProps.menuProps ? overflowButtonProps.menuProps.items : []).concat(overflowItems);\n\n      var overflowProps = tslib_1.__assign({}, overflowButtonProps, {\n        styles: tslib_1.__assign({\n          menuIcon: {\n            fontSize: '17px'\n          }\n        }, overflowButtonProps.styles),\n        className: css('ms-CommandBar-overflowButton', overflowButtonProps.className),\n        menuProps: tslib_1.__assign({}, overflowButtonProps.menuProps, {\n          items: combinedOverflowItems\n        }),\n        menuIconProps: tslib_1.__assign({\n          iconName: 'More'\n        }, overflowButtonProps.menuIconProps)\n      });\n\n      return React.createElement(OverflowButtonType, tslib_1.__assign({}, overflowProps));\n    };\n\n    _this._onReduceData = function (data) {\n      var _a = _this.props,\n          shiftOnReduce = _a.shiftOnReduce,\n          onDataReduced = _a.onDataReduced;\n      var primaryItems = data.primaryItems,\n          overflowItems = data.overflowItems,\n          cacheKey = data.cacheKey; // Use first item if shiftOnReduce, otherwise use last item\n\n      var movedItem = primaryItems[shiftOnReduce ? 0 : primaryItems.length - 1];\n\n      if (movedItem !== undefined) {\n        movedItem.renderedInOverflow = true;\n        overflowItems = [movedItem].concat(overflowItems);\n        primaryItems = shiftOnReduce ? primaryItems.slice(1) : primaryItems.slice(0, -1);\n        data.primaryItems = primaryItems;\n        data.overflowItems = overflowItems;\n        cacheKey = _this._computeCacheKey(data);\n\n        if (onDataReduced) {\n          onDataReduced(movedItem);\n        }\n\n        return tslib_1.__assign({}, data, {\n          cacheKey: cacheKey\n        });\n      }\n\n      return undefined;\n    };\n\n    _this._onGrowData = function (data) {\n      var _a = _this.props,\n          shiftOnReduce = _a.shiftOnReduce,\n          onDataGrown = _a.onDataGrown;\n      var minimumOverflowItems = data.minimumOverflowItems;\n      var primaryItems = data.primaryItems,\n          overflowItems = data.overflowItems,\n          cacheKey = data.cacheKey;\n      var movedItem = overflowItems[0]; // Make sure that moved item exists and is not one of the original overflow items\n\n      if (movedItem !== undefined && overflowItems.length > minimumOverflowItems) {\n        movedItem.renderedInOverflow = false;\n        overflowItems = overflowItems.slice(1); // if shiftOnReduce, movedItem goes first, otherwise, last.\n\n        primaryItems = shiftOnReduce ? [movedItem].concat(primaryItems) : primaryItems.concat([movedItem]);\n        data.primaryItems = primaryItems;\n        data.overflowItems = overflowItems;\n        cacheKey = _this._computeCacheKey(data);\n\n        if (onDataGrown) {\n          onDataGrown(movedItem);\n        }\n\n        return tslib_1.__assign({}, data, {\n          cacheKey: cacheKey\n        });\n      }\n\n      return undefined;\n    };\n\n    return _this;\n  }\n\n  CommandBarBase.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        items = _a.items,\n        overflowItems = _a.overflowItems,\n        farItems = _a.farItems,\n        styles = _a.styles,\n        theme = _a.theme,\n        _b = _a.onReduceData,\n        onReduceData = _b === void 0 ? this._onReduceData : _b,\n        _c = _a.onGrowData,\n        onGrowData = _c === void 0 ? this._onGrowData : _c;\n    var commandBarData = {\n      primaryItems: items.slice(),\n      overflowItems: overflowItems.slice(),\n      minimumOverflowItems: overflowItems.slice().length,\n      farItems: farItems,\n      cacheKey: ''\n    };\n    this._classNames = getClassNames(styles, {\n      theme: theme\n    });\n    return React.createElement(ResizeGroup, {\n      componentRef: this._resizeGroup,\n      className: className,\n      data: commandBarData,\n      onReduceData: onReduceData,\n      onGrowData: onGrowData,\n      onRenderData: this._onRenderData\n    });\n  };\n\n  CommandBarBase.prototype.focus = function () {\n    var overflowSet = this._overflowSet.current;\n    overflowSet && overflowSet.focus();\n  };\n\n  CommandBarBase.prototype.remeasure = function () {\n    this._resizeGroup.current && this._resizeGroup.current.remeasure();\n  };\n\n  CommandBarBase.prototype._onButtonClick = function (item) {\n    return function (ev) {\n      // inactive is deprecated. remove check in 7.0\n      if (item.inactive) {\n        return;\n      }\n\n      if (item.onClick) {\n        item.onClick(ev, item);\n      }\n    };\n  };\n\n  CommandBarBase.prototype._computeCacheKey = function (data) {\n    var primaryItems = data.primaryItems,\n        _a = data.farItems,\n        farItems = _a === void 0 ? [] : _a,\n        overflowItems = data.overflowItems;\n\n    var returnKey = function returnKey(acc, current) {\n      var _a = current.cacheKey,\n          cacheKey = _a === void 0 ? current.key : _a;\n      return acc + cacheKey;\n    };\n\n    var primaryKey = primaryItems.reduce(returnKey, '');\n    var farKey = farItems.reduce(returnKey, '');\n    var overflowKey = !!overflowItems.length ? 'overflow' : '';\n    return [primaryKey, farKey, overflowKey].join(' ');\n  };\n\n  CommandBarBase.defaultProps = {\n    items: [],\n    overflowItems: []\n  };\n  return CommandBarBase;\n}(BaseComponent);\n\nexport { CommandBarBase };","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _layersByHostId = {};\n\nvar _defaultHostSelector;\n/**\r\n * Register a layer for a given host id\r\n * @param hostId Id of the layer host\r\n * @param layer Layer instance\r\n */\n\n\nexport function registerLayer(hostId, layer) {\n  if (!_layersByHostId[hostId]) {\n    _layersByHostId[hostId] = [];\n  }\n\n  _layersByHostId[hostId].push(layer);\n}\n/**\r\n * Unregister a layer for a given host id\r\n * @param hostId Id of the layer host\r\n * @param layer Layer instance\r\n */\n\nexport function unregisterLayer(hostId, layer) {\n  if (_layersByHostId[hostId]) {\n    var idx = _layersByHostId[hostId].indexOf(layer);\n\n    if (idx >= 0) {\n      _layersByHostId[hostId].splice(idx, 1);\n\n      if (_layersByHostId[hostId].length === 0) {\n        delete _layersByHostId[hostId];\n      }\n    }\n  }\n}\n/**\r\n * Used for notifying applicable Layers that a host is available/unavailable and to re-evaluate Layers that\r\n * care about the specific host.\r\n */\n\nexport function notifyHostChanged(id) {\n  if (_layersByHostId[id]) {\n    _layersByHostId[id].forEach(function (layer) {\n      return layer.forceUpdate();\n    });\n  }\n}\n/**\r\n * Sets the default target selector to use when determining the host in which\r\n * Layered content will be injected into. If not provided, an element will be\r\n * created at the end of the document body.\r\n *\r\n * Passing in a falsey value will clear the default target and reset back to\r\n * using a created element at the end of document body.\r\n */\n\nexport function setDefaultTarget(selector) {\n  _defaultHostSelector = selector;\n}\n/**\r\n * Get the default target selector when determining a host\r\n */\n\nexport function getDefaultTarget() {\n  return _defaultHostSelector;\n}","map":null,"metadata":{},"sourceType":"module"}
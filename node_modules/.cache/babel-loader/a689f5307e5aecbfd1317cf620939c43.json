{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { BaseComponent, anchorProperties, assign, buttonProperties, getId, getNativeProps, KeyCodes, css, mergeAriaAttributeValues, portalContainsElement } from '../../Utilities';\nimport { Icon } from '../../Icon';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ContextualMenu } from '../../ContextualMenu';\nimport { getBaseButtonClassNames } from './BaseButton.classNames';\nimport { getClassNames as getBaseSplitButtonClassNames } from './SplitButton/SplitButton.classNames';\nimport { KeytipData } from '../../KeytipData';\nvar TouchIdleDelay = 500;\n/* ms */\n\nvar BaseButton =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(BaseButton, _super);\n\n  function BaseButton(props, rootClassName) {\n    var _this = _super.call(this, props) || this;\n\n    _this._buttonElement = React.createRef();\n    _this._splitButtonContainer = React.createRef();\n\n    _this._onRenderIcon = function (buttonProps, defaultRender) {\n      var iconProps = _this.props.iconProps;\n\n      if (iconProps) {\n        var className = iconProps.className,\n            rest = tslib_1.__rest(iconProps, [\"className\"]);\n\n        return React.createElement(Icon, tslib_1.__assign({\n          className: css(_this._classNames.icon, className)\n        }, rest));\n      }\n\n      return null;\n    };\n\n    _this._onRenderTextContents = function () {\n      var _a = _this.props,\n          text = _a.text,\n          children = _a.children,\n          _b = _a.secondaryText,\n          secondaryText = _b === void 0 ? _this.props.description : _b,\n          _c = _a.onRenderText,\n          onRenderText = _c === void 0 ? _this._onRenderText : _c,\n          _d = _a.onRenderDescription,\n          onRenderDescription = _d === void 0 ? _this._onRenderDescription : _d;\n\n      if (text || typeof children === 'string' || secondaryText) {\n        return React.createElement(\"div\", {\n          className: _this._classNames.textContainer\n        }, onRenderText(_this.props, _this._onRenderText), onRenderDescription(_this.props, _this._onRenderDescription));\n      }\n\n      return [onRenderText(_this.props, _this._onRenderText), onRenderDescription(_this.props, _this._onRenderDescription)];\n    };\n\n    _this._onRenderText = function () {\n      var text = _this.props.text;\n      var children = _this.props.children; // For backwards compat, we should continue to take in the text content from children.\n\n      if (text === undefined && typeof children === 'string') {\n        text = children;\n      }\n\n      if (_this._hasText()) {\n        return React.createElement(\"div\", {\n          key: _this._labelId,\n          className: _this._classNames.label,\n          id: _this._labelId\n        }, text);\n      }\n\n      return null;\n    };\n\n    _this._onRenderChildren = function () {\n      var children = _this.props.children; // If children is just a string, either it or the text will be rendered via onRenderLabel\n      // If children is another component, it will be rendered after text\n\n      if (typeof children === 'string') {\n        return null;\n      }\n\n      return children;\n    };\n\n    _this._onRenderDescription = function (props) {\n      var _a = props.secondaryText,\n          secondaryText = _a === void 0 ? _this.props.description : _a; // ms-Button-description is only shown when the button type is compound.\n      // In other cases it will not be displayed.\n\n      return secondaryText ? React.createElement(\"div\", {\n        key: _this._descriptionId,\n        className: _this._classNames.description,\n        id: _this._descriptionId\n      }, secondaryText) : null;\n    };\n\n    _this._onRenderAriaDescription = function () {\n      var ariaDescription = _this.props.ariaDescription; // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan,\n      // otherwise it will be assigned to descriptionSpan.\n\n      return ariaDescription ? React.createElement(\"span\", {\n        className: _this._classNames.screenReaderText,\n        id: _this._ariaDescriptionId\n      }, ariaDescription) : null;\n    };\n\n    _this._onRenderMenuIcon = function (props) {\n      var menuIconProps = _this.props.menuIconProps;\n      return React.createElement(Icon, tslib_1.__assign({\n        iconName: \"ChevronDown\"\n      }, menuIconProps, {\n        className: _this._classNames.menuIcon\n      }));\n    };\n\n    _this._onRenderMenu = function (menuProps) {\n      var _a = menuProps.onDismiss,\n          onDismiss = _a === void 0 ? _this._dismissMenu : _a;\n      var MenuType = _this.props.menuAs || ContextualMenu; // the accessible menu label (accessible name) has a relationship to the button.\n      // If the menu props do not specify an explicit value for aria-label or aria-labelledBy,\n      // AND the button has text, we'll set the menu aria-labelledBy to the text element id.\n\n      if (!menuProps.ariaLabel && !menuProps.labelElementId && _this._hasText()) {\n        menuProps = tslib_1.__assign({}, menuProps, {\n          labelElementId: _this._labelId\n        });\n      }\n\n      return React.createElement(MenuType, tslib_1.__assign({\n        id: _this._labelId + '-menu',\n        directionalHint: DirectionalHint.bottomLeftEdge\n      }, menuProps, {\n        shouldFocusOnContainer: _this.state.menuProps ? _this.state.menuProps.shouldFocusOnContainer : undefined,\n        shouldFocusOnMount: _this.state.menuProps ? _this.state.menuProps.shouldFocusOnMount : undefined,\n        className: css('ms-BaseButton-menuhost', menuProps.className),\n        target: _this._isSplitButton ? _this._splitButtonContainer.current : _this._buttonElement.current,\n        onDismiss: onDismiss\n      }));\n    };\n\n    _this._dismissMenu = function () {\n      var menuProps = null;\n\n      if (_this.props.persistMenu && _this.state.menuProps) {\n        menuProps = _this.state.menuProps;\n        menuProps.hidden = true;\n      }\n\n      _this.setState({\n        menuProps: menuProps\n      });\n    };\n\n    _this._openMenu = function (shouldFocusOnContainer, shouldFocusOnMount) {\n      if (shouldFocusOnMount === void 0) {\n        shouldFocusOnMount = true;\n      }\n\n      if (_this.props.menuProps) {\n        var menuProps = tslib_1.__assign({}, _this.props.menuProps, {\n          shouldFocusOnContainer: shouldFocusOnContainer,\n          shouldFocusOnMount: shouldFocusOnMount\n        });\n\n        if (_this.props.persistMenu) {\n          menuProps.hidden = false;\n        }\n\n        _this.setState({\n          menuProps: menuProps\n        });\n      }\n    };\n\n    _this._onToggleMenu = function (shouldFocusOnContainer) {\n      var currentMenuProps = _this.state.menuProps;\n      var shouldFocusOnMount = true;\n\n      if (_this.props.menuProps && _this.props.menuProps.shouldFocusOnMount === false) {\n        shouldFocusOnMount = false;\n      }\n\n      if (_this.props.persistMenu) {\n        currentMenuProps && currentMenuProps.hidden ? _this._openMenu(shouldFocusOnContainer, shouldFocusOnMount) : _this._dismissMenu();\n      } else {\n        currentMenuProps ? _this._dismissMenu() : _this._openMenu(shouldFocusOnContainer, shouldFocusOnMount);\n      }\n    };\n\n    _this._onSplitContainerFocusCapture = function (ev) {\n      var container = _this._splitButtonContainer.current; // If the target is coming from the portal we do not need to set focus on the container.\n\n      if (!container || ev.target && portalContainsElement(ev.target, container)) {\n        return;\n      } // We should never be able to focus the individual buttons in a split button. Focus\n      // should always remain on the container.\n\n\n      container.focus();\n    };\n\n    _this._onSplitButtonPrimaryClick = function (ev) {\n      if (_this._isExpanded) {\n        _this._dismissMenu();\n      }\n\n      if (!_this._processingTouch && _this.props.onClick) {\n        _this.props.onClick(ev);\n      } else if (_this._processingTouch) {\n        _this._onMenuClick(ev);\n      }\n    };\n\n    _this._onKeyDown = function (ev) {\n      // explicity cancelling event so click won't fire after this\n      if (_this.props.disabled && (ev.which === KeyCodes.enter || ev.which === KeyCodes.space)) {\n        ev.preventDefault();\n        ev.stopPropagation();\n      } else if (!_this.props.disabled) {\n        if (_this.props.menuProps) {\n          _this._onMenuKeyDown(ev);\n        } else if (_this.props.onKeyDown !== undefined) {\n          _this.props.onKeyDown(ev); // not cancelling event because it's not disabled\n\n        }\n      }\n    };\n\n    _this._onKeyUp = function (ev) {\n      if (!_this.props.disabled && _this.props.onKeyUp !== undefined) {\n        _this.props.onKeyUp(ev); // not cancelling event because it's not disabled\n\n      }\n    };\n\n    _this._onKeyPress = function (ev) {\n      if (!_this.props.disabled && _this.props.onKeyPress !== undefined) {\n        _this.props.onKeyPress(ev); // not cancelling event because it's not disabled\n\n      }\n    };\n\n    _this._onMouseUp = function (ev) {\n      if (!_this.props.disabled && _this.props.onMouseUp !== undefined) {\n        _this.props.onMouseUp(ev); // not cancelling event because it's not disabled\n\n      }\n    };\n\n    _this._onMouseDown = function (ev) {\n      if (!_this.props.disabled && _this.props.onMouseDown !== undefined) {\n        _this.props.onMouseDown(ev); // not cancelling event because it's not disabled\n\n      }\n    };\n\n    _this._onClick = function (ev) {\n      if (!_this.props.disabled) {\n        if (_this.props.menuProps) {\n          _this._onMenuClick(ev);\n        } else if (_this.props.onClick !== undefined) {\n          _this.props.onClick(ev); // not cancelling event because it's not disabled\n\n        }\n      }\n    };\n\n    _this._onSplitButtonContainerKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        if (_this._buttonElement.current) {\n          _this._buttonElement.current.click();\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      } else {\n        _this._onMenuKeyDown(ev);\n      }\n    };\n\n    _this._onMenuKeyDown = function (ev) {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      if (_this.props.onKeyDown) {\n        _this.props.onKeyDown(ev);\n      }\n\n      if (!ev.defaultPrevented && _this._isValidMenuOpenKey(ev)) {\n        var onMenuClick = _this.props.onMenuClick;\n\n        if (onMenuClick) {\n          onMenuClick(ev, _this);\n        }\n\n        _this._onToggleMenu(false);\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    };\n\n    _this._onTouchStart = function () {\n      if (_this._isSplitButton && _this._splitButtonContainer.current && !('onpointerdown' in _this._splitButtonContainer.current)) {\n        _this._handleTouchAndPointerEvent();\n      }\n    };\n\n    _this._onMenuClick = function (ev) {\n      var onMenuClick = _this.props.onMenuClick;\n\n      if (onMenuClick) {\n        onMenuClick(ev, _this);\n      }\n\n      if (!ev.defaultPrevented) {\n        // When Edge + Narrator are used together (regardless of if the button is in a form or not), pressing\n        // \"Enter\" fires this method and not _onMenuKeyDown. Checking ev.nativeEvent.detail differentiates\n        // between a real click event and a keypress event.\n        var shouldFocusOnContainer = ev.nativeEvent.detail !== 0;\n\n        _this._onToggleMenu(shouldFocusOnContainer);\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    };\n\n    _this._warnConditionallyRequiredProps(['menuProps', 'onClick'], 'split', _this.props.split);\n\n    _this._warnDeprecations({\n      rootProps: undefined,\n      description: 'secondaryText',\n      toggled: 'checked'\n    });\n\n    _this._labelId = getId();\n    _this._descriptionId = getId();\n    _this._ariaDescriptionId = getId();\n    var menuProps = null;\n\n    if (props.persistMenu && props.menuProps) {\n      menuProps = props.menuProps;\n      menuProps.hidden = true;\n    }\n\n    _this.state = {\n      menuProps: menuProps\n    };\n    return _this;\n  }\n\n  Object.defineProperty(BaseButton.prototype, \"_isSplitButton\", {\n    get: function get() {\n      return !!this.props.menuProps && !!this.props.onClick && this.props.split === true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseButton.prototype, \"_isExpanded\", {\n    get: function get() {\n      if (this.props.persistMenu) {\n        return !this.state.menuProps.hidden;\n      }\n\n      return !!this.state.menuProps;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  BaseButton.prototype.render = function () {\n    var _a = this.props,\n        ariaDescription = _a.ariaDescription,\n        ariaLabel = _a.ariaLabel,\n        ariaHidden = _a.ariaHidden,\n        className = _a.className,\n        disabled = _a.disabled,\n        allowDisabledFocus = _a.allowDisabledFocus,\n        primaryDisabled = _a.primaryDisabled,\n        _b = _a.secondaryText,\n        secondaryText = _b === void 0 ? this.props.description : _b,\n        href = _a.href,\n        iconProps = _a.iconProps,\n        menuIconProps = _a.menuIconProps,\n        styles = _a.styles,\n        checked = _a.checked,\n        variantClassName = _a.variantClassName,\n        theme = _a.theme,\n        toggle = _a.toggle,\n        getClassNames = _a.getClassNames;\n    var menuProps = this.state.menuProps; // Button is disabled if the whole button (in case of splitbutton is disabled) or if the primary action is disabled\n\n    var isPrimaryButtonDisabled = disabled || primaryDisabled;\n    this._classNames = getClassNames ? getClassNames(theme, className, variantClassName, iconProps && iconProps.className, menuIconProps && menuIconProps.className, isPrimaryButtonDisabled, checked, !!menuProps, this.props.split, !!allowDisabledFocus) : getBaseButtonClassNames(theme, styles, className, variantClassName, iconProps && iconProps.className, menuIconProps && menuIconProps.className, isPrimaryButtonDisabled, checked, !!menuProps, this.props.split);\n\n    var _c = this,\n        _ariaDescriptionId = _c._ariaDescriptionId,\n        _labelId = _c._labelId,\n        _descriptionId = _c._descriptionId; // Anchor tag cannot be disabled hence in disabled state rendering\n    // anchor button as normal button\n\n\n    var renderAsAnchor = !isPrimaryButtonDisabled && !!href;\n    var tag = renderAsAnchor ? 'a' : 'button';\n    var nativeProps = getNativeProps(assign(renderAsAnchor ? {} : {\n      type: 'button'\n    }, this.props.rootProps, this.props), renderAsAnchor ? anchorProperties : buttonProperties, ['disabled' // let disabled buttons be focused and styled as disabled.\n    ]); // Check for ariaLabel passed in via Button props, and fall back to aria-label passed in via native props\n\n    var resolvedAriaLabel = ariaLabel || nativeProps['aria-label']; // Check for ariaDescription, secondaryText or aria-describedby in the native props to determine source of aria-describedby\n    // otherwise default to undefined so property does not appear in output.\n\n    var ariaDescribedBy = undefined;\n\n    if (ariaDescription) {\n      ariaDescribedBy = _ariaDescriptionId;\n    } else if (secondaryText) {\n      ariaDescribedBy = _descriptionId;\n    } else if (nativeProps['aria-describedby']) {\n      ariaDescribedBy = nativeProps['aria-describedby'];\n    } // If an explicit ariaLabel is given, use that as the label and we're done.\n    // If an explicit aria-labelledby is given, use that and we're done.\n    // If any kind of description is given (which will end up as an aria-describedby attribute),\n    // set the labelledby element. Otherwise, the button is labeled implicitly by the descendent\n    // text on the button (if it exists). Never set both aria-label and aria-labelledby.\n\n\n    var ariaLabelledBy = undefined;\n\n    if (!resolvedAriaLabel) {\n      if (nativeProps['aria-labelledby']) {\n        ariaLabelledBy = nativeProps['aria-labelledby'];\n      } else if (ariaDescribedBy) {\n        ariaLabelledBy = this._hasText() ? _labelId : undefined;\n      }\n    }\n\n    var dataIsFocusable = this.props['data-is-focusable'] === false || disabled && !allowDisabledFocus || this._isSplitButton ? false : true;\n    var buttonProps = assign(nativeProps, {\n      className: this._classNames.root,\n      ref: this._buttonElement,\n      disabled: isPrimaryButtonDisabled && !allowDisabledFocus,\n      onKeyDown: this._onKeyDown,\n      onKeyPress: this._onKeyPress,\n      onKeyUp: this._onKeyUp,\n      onMouseDown: this._onMouseDown,\n      onMouseUp: this._onMouseUp,\n      onClick: this._onClick,\n      'aria-label': resolvedAriaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-describedby': ariaDescribedBy,\n      'aria-disabled': isPrimaryButtonDisabled,\n      'data-is-focusable': dataIsFocusable,\n      'aria-pressed': toggle ? !!checked : undefined // aria-pressed attribute should only be present for toggle buttons\n\n    });\n\n    if (ariaHidden) {\n      buttonProps['aria-hidden'] = true;\n    }\n\n    if (this._isSplitButton) {\n      return this._onRenderSplitButtonContent(tag, buttonProps);\n    } else if (this.props.menuProps) {\n      assign(buttonProps, {\n        'aria-expanded': this._isExpanded,\n        'aria-owns': this.state.menuProps ? this._labelId + '-menu' : null,\n        'aria-haspopup': true\n      });\n    }\n\n    return this._onRenderContent(tag, buttonProps);\n  };\n\n  BaseButton.prototype.componentDidMount = function () {\n    // For split buttons, touching anywhere in the button should drop the dropdown, which should contain the primary action.\n    // This gives more hit target space for touch environments. We're setting the onpointerdown here, because React\n    // does not support Pointer events yet.\n    if (this._isSplitButton && this._splitButtonContainer.current && 'onpointerdown' in this._splitButtonContainer.current) {\n      this._events.on(this._splitButtonContainer.current, 'pointerdown', this._onPointerDown, true);\n    }\n  };\n\n  BaseButton.prototype.componentDidUpdate = function (prevProps, prevState) {\n    // If Button's menu was closed, run onAfterMenuDismiss\n    if (this.props.onAfterMenuDismiss && prevState.menuProps && !this.state.menuProps) {\n      this.props.onAfterMenuDismiss();\n    }\n  };\n\n  BaseButton.prototype.focus = function () {\n    if (this._isSplitButton && this._splitButtonContainer.current) {\n      this._splitButtonContainer.current.focus();\n    } else if (this._buttonElement.current) {\n      this._buttonElement.current.focus();\n    }\n  };\n\n  BaseButton.prototype.dismissMenu = function () {\n    this._dismissMenu();\n  };\n\n  BaseButton.prototype.openMenu = function (shouldFocusOnContainer, shouldFocusOnMount) {\n    this._openMenu(shouldFocusOnContainer, shouldFocusOnMount);\n  };\n\n  BaseButton.prototype._onRenderContent = function (tag, buttonProps) {\n    var _this = this;\n\n    var props = this.props;\n    var Tag = tag;\n    var menuIconProps = props.menuIconProps,\n        menuProps = props.menuProps,\n        _a = props.onRenderIcon,\n        onRenderIcon = _a === void 0 ? this._onRenderIcon : _a,\n        _b = props.onRenderAriaDescription,\n        onRenderAriaDescription = _b === void 0 ? this._onRenderAriaDescription : _b,\n        _c = props.onRenderChildren,\n        onRenderChildren = _c === void 0 ? this._onRenderChildren : _c,\n        _d = props.onRenderMenu,\n        onRenderMenu = _d === void 0 ? this._onRenderMenu : _d,\n        _e = props.onRenderMenuIcon,\n        onRenderMenuIcon = _e === void 0 ? this._onRenderMenuIcon : _e,\n        disabled = props.disabled;\n    var keytipProps = props.keytipProps;\n\n    if (keytipProps && menuProps) {\n      keytipProps = tslib_1.__assign({}, keytipProps, {\n        hasMenu: true\n      });\n    }\n\n    var Content = // If we're making a split button, we won't put the keytip here\n    React.createElement(KeytipData, {\n      keytipProps: !this._isSplitButton ? keytipProps : undefined,\n      ariaDescribedBy: buttonProps['aria-describedby'],\n      disabled: disabled\n    }, function (keytipAttributes) {\n      return React.createElement(Tag, tslib_1.__assign({}, buttonProps, keytipAttributes), React.createElement(\"div\", {\n        className: _this._classNames.flexContainer\n      }, onRenderIcon(props, _this._onRenderIcon), _this._onRenderTextContents(), onRenderAriaDescription(props, _this._onRenderAriaDescription), onRenderChildren(props, _this._onRenderChildren), !_this._isSplitButton && (menuProps || menuIconProps || _this.props.onRenderMenuIcon) && onRenderMenuIcon(_this.props, _this._onRenderMenuIcon), _this.state.menuProps && !_this.state.menuProps.doNotLayer && onRenderMenu(menuProps, _this._onRenderMenu)));\n    });\n\n    if (menuProps && menuProps.doNotLayer) {\n      return React.createElement(\"div\", {\n        style: {\n          display: 'inline-block'\n        }\n      }, Content, this.state.menuProps && onRenderMenu(menuProps, this._onRenderMenu));\n    }\n\n    return Content;\n  };\n\n  BaseButton.prototype._hasText = function () {\n    // _onRenderTextContents and _onRenderText do not perform the same checks. Below is parity with what _onRenderText used to have\n    // before the refactor that introduced this function. _onRenderTextContents does not require props.text to be undefined in order\n    // for props.children to be used as a fallback. Purely a code maintainability/reuse issue, but logged as Issue #4979\n    return this.props.text !== null && (this.props.text !== undefined || typeof this.props.children === 'string');\n  };\n\n  BaseButton.prototype._onRenderSplitButtonContent = function (tag, buttonProps) {\n    var _this = this;\n\n    var _a = this.props,\n        _b = _a.styles,\n        styles = _b === void 0 ? {} : _b,\n        disabled = _a.disabled,\n        allowDisabledFocus = _a.allowDisabledFocus,\n        checked = _a.checked,\n        getSplitButtonClassNames = _a.getSplitButtonClassNames,\n        primaryDisabled = _a.primaryDisabled,\n        menuProps = _a.menuProps,\n        toggle = _a.toggle;\n    var keytipProps = this.props.keytipProps;\n    var classNames = getSplitButtonClassNames ? getSplitButtonClassNames(!!disabled, !!this.state.menuProps, !!checked, !!allowDisabledFocus) : styles && getBaseSplitButtonClassNames(styles, !!disabled, !!this.state.menuProps, !!checked);\n    assign(buttonProps, {\n      onClick: undefined,\n      tabIndex: -1,\n      'data-is-focusable': false\n    });\n    var ariaDescribedBy = buttonProps.ariaDescription;\n\n    if (keytipProps && menuProps) {\n      keytipProps = tslib_1.__assign({}, keytipProps, {\n        hasMenu: true\n      });\n    }\n\n    var containerProps = getNativeProps(buttonProps, [], ['disabled']);\n    return React.createElement(KeytipData, {\n      keytipProps: keytipProps,\n      disabled: disabled\n    }, function (keytipAttributes) {\n      return React.createElement(\"div\", tslib_1.__assign({}, containerProps, {\n        \"data-ktp-target\": keytipAttributes['data-ktp-target'],\n        role: 'button',\n        \"aria-disabled\": disabled,\n        \"aria-haspopup\": true,\n        \"aria-expanded\": _this._isExpanded,\n        \"aria-pressed\": toggle ? !!checked : undefined,\n        \"aria-describedby\": mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby']),\n        className: classNames && classNames.splitButtonContainer,\n        onKeyDown: _this._onSplitButtonContainerKeyDown,\n        onTouchStart: _this._onTouchStart,\n        ref: _this._splitButtonContainer,\n        \"data-is-focusable\": true,\n        onClick: !disabled && !primaryDisabled ? _this._onSplitButtonPrimaryClick : undefined,\n        tabIndex: !disabled || allowDisabledFocus ? 0 : undefined,\n        \"aria-roledescription\": buttonProps['aria-roledescription'],\n        onFocusCapture: _this._onSplitContainerFocusCapture\n      }), React.createElement(\"span\", {\n        style: {\n          display: 'flex'\n        }\n      }, _this._onRenderContent(tag, buttonProps), _this._onRenderSplitButtonMenuButton(classNames, keytipAttributes), _this._onRenderSplitButtonDivider(classNames)));\n    });\n  };\n\n  BaseButton.prototype._onRenderSplitButtonDivider = function (classNames) {\n    if (classNames && classNames.divider) {\n      return React.createElement(\"span\", {\n        className: classNames.divider\n      });\n    }\n\n    return null;\n  };\n\n  BaseButton.prototype._onRenderSplitButtonMenuButton = function (classNames, keytipAttributes) {\n    var _a = this.props,\n        allowDisabledFocus = _a.allowDisabledFocus,\n        checked = _a.checked,\n        disabled = _a.disabled;\n    var menuIconProps = this.props.menuIconProps;\n    var splitButtonAriaLabel = this.props.splitButtonAriaLabel;\n\n    if (menuIconProps === undefined) {\n      menuIconProps = {\n        iconName: 'ChevronDown'\n      };\n    }\n\n    var splitButtonProps = {\n      styles: classNames,\n      checked: checked,\n      disabled: disabled,\n      allowDisabledFocus: allowDisabledFocus,\n      onClick: this._onMenuClick,\n      menuProps: undefined,\n      iconProps: tslib_1.__assign({}, menuIconProps, {\n        className: this._classNames.menuIcon\n      }),\n      ariaLabel: splitButtonAriaLabel,\n      'aria-haspopup': true,\n      'aria-expanded': this._isExpanded,\n      'data-is-focusable': false\n    }; // Add data-ktp-execute-target to the split button if the keytip is defined\n\n    return React.createElement(BaseButton, tslib_1.__assign({}, splitButtonProps, {\n      \"data-ktp-execute-target\": keytipAttributes['data-ktp-execute-target'],\n      onMouseDown: this._onMouseDown,\n      tabIndex: -1\n    }));\n  };\n\n  BaseButton.prototype._onPointerDown = function (ev) {\n    if (ev.pointerType === 'touch') {\n      this._handleTouchAndPointerEvent();\n\n      ev.preventDefault();\n      ev.stopImmediatePropagation();\n    }\n  };\n\n  BaseButton.prototype._handleTouchAndPointerEvent = function () {\n    var _this = this; // If we already have an existing timeeout from a previous touch and pointer event\n    // cancel that timeout so we can set a nwe one.\n\n\n    if (this._lastTouchTimeoutId !== undefined) {\n      this._async.clearTimeout(this._lastTouchTimeoutId);\n\n      this._lastTouchTimeoutId = undefined;\n    }\n\n    this._processingTouch = true;\n    this._lastTouchTimeoutId = this._async.setTimeout(function () {\n      _this._processingTouch = false;\n      _this._lastTouchTimeoutId = undefined;\n    }, TouchIdleDelay);\n  };\n  /**\r\n   * Returns if the user hits a valid keyboard key to open the menu\r\n   * @param ev - the keyboard event\r\n   * @returns True if user clicks on custom trigger key if enabled or alt + down arrow if not. False otherwise.\r\n   */\n\n\n  BaseButton.prototype._isValidMenuOpenKey = function (ev) {\n    if (this.props.menuTriggerKeyCode) {\n      return ev.which === this.props.menuTriggerKeyCode;\n    } else if (this.props.menuProps) {\n      return ev.which === KeyCodes.down && (ev.altKey || ev.metaKey);\n    } // Note: When enter is pressed, we will let the event continue to propagate\n    // to trigger the onClick event on the button\n\n\n    return false;\n  };\n\n  BaseButton.defaultProps = {\n    baseClassName: 'ms-Button',\n    styles: {},\n    split: false\n  };\n  return BaseButton;\n}(BaseComponent);\n\nexport { BaseButton };","map":null,"metadata":{},"sourceType":"module"}
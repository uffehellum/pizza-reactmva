{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { BaseComponent, mergeAriaAttributeValues } from '../../Utilities';\nimport { KeytipManager } from '../../utilities/keytips/KeytipManager';\nimport { mergeOverflows, sequencesToID, getAriaDescribedBy } from '../../utilities/keytips/KeytipUtils';\n/**\r\n * A small element to help the target component correctly read out its aria-describedby for its Keytip\r\n */\n\nvar KeytipData =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(KeytipData, _super);\n\n  function KeytipData() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._keytipManager = KeytipManager.getInstance();\n    return _this;\n  }\n\n  KeytipData.prototype.componentDidMount = function () {\n    // Register Keytip in KeytipManager\n    if (this.props.keytipProps) {\n      this._uniqueId = this._keytipManager.register(this._getKtpProps());\n    }\n  };\n\n  KeytipData.prototype.componentWillUnmount = function () {\n    // Unregister Keytip in KeytipManager\n    this.props.keytipProps && this._keytipManager.unregister(this._getKtpProps(), this._uniqueId);\n  };\n\n  KeytipData.prototype.componentDidUpdate = function () {\n    // Update Keytip in KeytipManager\n    this.props.keytipProps && this._keytipManager.update(this._getKtpProps(), this._uniqueId);\n  };\n\n  KeytipData.prototype.render = function () {\n    var _a = this.props,\n        children = _a.children,\n        keytipProps = _a.keytipProps,\n        ariaDescribedBy = _a.ariaDescribedBy;\n    var nativeKeytipProps = {};\n\n    if (keytipProps) {\n      nativeKeytipProps = this._getKtpAttrs(keytipProps, ariaDescribedBy);\n    }\n\n    return children(nativeKeytipProps);\n  };\n\n  KeytipData.prototype._getKtpProps = function () {\n    return tslib_1.__assign({\n      disabled: this.props.disabled\n    }, this.props.keytipProps);\n  };\n  /**\r\n   * Gets the aria- and data- attributes to attach to the component\r\n   * @param keytipProps\r\n   * @param describedByPrepend\r\n   */\n\n\n  KeytipData.prototype._getKtpAttrs = function (keytipProps, describedByPrepend) {\n    if (keytipProps) {\n      // Add the parent overflow sequence if necessary\n      var newKeytipProps = this._keytipManager.addParentOverflow(keytipProps); // Construct aria-describedby and data-ktp-id attributes and return\n\n\n      var ariaDescribedBy = getAriaDescribedBy(newKeytipProps.keySequences);\n      var keySequences = newKeytipProps.keySequences.slice();\n\n      if (newKeytipProps.overflowSetSequence) {\n        keySequences = mergeOverflows(keySequences, newKeytipProps.overflowSetSequence);\n      }\n\n      var ktpId = sequencesToID(keySequences);\n      return {\n        'aria-describedby': mergeAriaAttributeValues(describedByPrepend, ariaDescribedBy),\n        'data-ktp-target': ktpId,\n        'data-ktp-execute-target': ktpId\n      };\n    }\n\n    return undefined;\n  };\n\n  return KeytipData;\n}(BaseComponent);\n\nexport { KeytipData };","map":null,"metadata":{},"sourceType":"module"}
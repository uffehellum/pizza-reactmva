{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { BaseComponent, divProperties, getNativeProps, getId, assign, hasOverflow, createRef, portalContainsElement, classNamesFunction } from '../../Utilities';\nimport { TooltipOverflowMode } from './TooltipHost.types';\nimport { Tooltip } from './Tooltip';\nimport { TooltipDelay } from './Tooltip.types';\nvar getClassNames = classNamesFunction();\n\nvar TooltipHostBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(TooltipHostBase, _super); // Constructor\n\n\n  function TooltipHostBase(props) {\n    var _this = _super.call(this, props) || this; // The wrapping div that gets the hover events\n\n\n    _this._tooltipHost = createRef(); // The ID of the setTimeout that will eventually close the tooltip if the\n    // the tooltip isn't hovered over.\n\n    _this._closingTimer = -1;\n\n    _this.dismiss = function () {\n      _this._hideTooltip();\n    }; // Show Tooltip\n\n\n    _this._onTooltipMouseEnter = function (ev) {\n      var overflowMode = _this.props.overflowMode;\n\n      if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip !== _this) {\n        TooltipHostBase._currentVisibleTooltip.dismiss();\n      }\n\n      TooltipHostBase._currentVisibleTooltip = _this;\n\n      if (overflowMode !== undefined) {\n        var overflowElement = _this._getTargetElement();\n\n        if (overflowElement && !hasOverflow(overflowElement)) {\n          return;\n        }\n      }\n\n      if (ev.target && portalContainsElement(ev.target, _this._getTargetElement())) {\n        // Do not show tooltip when target is inside a portal relative to TooltipHost.\n        return;\n      }\n\n      _this._toggleTooltip(true);\n\n      _this._clearDismissTimer();\n    }; // Hide Tooltip\n\n\n    _this._onTooltipMouseLeave = function (ev) {\n      if (_this.props.closeDelay) {\n        _this._clearDismissTimer();\n\n        _this._closingTimer = _this._async.setTimeout(function () {\n          _this._toggleTooltip(false);\n        }, _this.props.closeDelay);\n      } else {\n        _this._toggleTooltip(false);\n      }\n\n      if (TooltipHostBase._currentVisibleTooltip === _this) {\n        TooltipHostBase._currentVisibleTooltip = undefined;\n      }\n    };\n\n    _this._clearDismissTimer = function () {\n      _this._async.clearTimeout(_this._closingTimer);\n    }; // Hide Tooltip\n\n\n    _this._hideTooltip = function () {\n      _this._toggleTooltip(false);\n    };\n\n    _this.state = {\n      isTooltipVisible: false\n    };\n    return _this;\n  } // Render\n\n\n  TooltipHostBase.prototype.render = function () {\n    var _a = this.props,\n        calloutProps = _a.calloutProps,\n        children = _a.children,\n        content = _a.content,\n        delay = _a.delay,\n        directionalHint = _a.directionalHint,\n        directionalHintForRTL = _a.directionalHintForRTL,\n        className = _a.hostClassName,\n        id = _a.id,\n        _b = _a.setAriaDescribedBy,\n        setAriaDescribedBy = _b === void 0 ? true : _b,\n        tooltipProps = _a.tooltipProps,\n        styles = _a.styles,\n        theme = _a.theme;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className\n    });\n    var isTooltipVisible = this.state.isTooltipVisible;\n    var tooltipId = id || getId('tooltip');\n    var isContentPresent = !!(content || tooltipProps && tooltipProps.onRenderContent && tooltipProps.onRenderContent());\n    var showTooltip = isTooltipVisible && isContentPresent;\n    var ariaDescribedBy = setAriaDescribedBy && isTooltipVisible && isContentPresent ? tooltipId : undefined;\n    return React.createElement(\"div\", tslib_1.__assign({\n      className: this._classNames.root,\n      ref: this._tooltipHost\n    }, {\n      onFocusCapture: this._onTooltipMouseEnter\n    }, {\n      onBlurCapture: this._hideTooltip\n    }, {\n      onMouseEnter: this._onTooltipMouseEnter,\n      onMouseLeave: this._onTooltipMouseLeave,\n      \"aria-describedby\": ariaDescribedBy\n    }), children, showTooltip && React.createElement(Tooltip, tslib_1.__assign({\n      id: tooltipId,\n      delay: delay,\n      content: content,\n      targetElement: this._getTargetElement(),\n      directionalHint: directionalHint,\n      directionalHintForRTL: directionalHintForRTL,\n      calloutProps: assign({}, calloutProps, {\n        onMouseEnter: this._onTooltipMouseEnter,\n        onMouseLeave: this._onTooltipMouseLeave\n      }),\n      onMouseEnter: this._onTooltipMouseEnter,\n      onMouseLeave: this._onTooltipMouseLeave\n    }, getNativeProps(this.props, divProperties), tooltipProps)));\n  };\n\n  TooltipHostBase.prototype.componentWillUnmount = function () {\n    if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip === this) {\n      TooltipHostBase._currentVisibleTooltip = undefined;\n    }\n  };\n\n  TooltipHostBase.prototype._getTargetElement = function () {\n    if (!this._tooltipHost.current) {\n      return undefined;\n    }\n\n    var overflowMode = this.props.overflowMode; // Select target element based on overflow mode. For parent mode, you want to position the tooltip relative\n    // to the parent element, otherwise it might look off.\n\n    if (overflowMode !== undefined) {\n      switch (overflowMode) {\n        case TooltipOverflowMode.Parent:\n          return this._tooltipHost.current.parentElement;\n\n        case TooltipOverflowMode.Self:\n          return this._tooltipHost.current;\n      }\n    }\n\n    return this._tooltipHost.current;\n  };\n\n  TooltipHostBase.prototype._toggleTooltip = function (isTooltipVisible) {\n    var _this = this;\n\n    if (this.state.isTooltipVisible !== isTooltipVisible) {\n      this.setState({\n        isTooltipVisible: isTooltipVisible\n      }, function () {\n        return _this.props.onTooltipToggle && _this.props.onTooltipToggle(_this.state.isTooltipVisible);\n      });\n    }\n  };\n\n  TooltipHostBase.defaultProps = {\n    delay: TooltipDelay.medium\n  };\n  return TooltipHostBase;\n}(BaseComponent);\n\nexport { TooltipHostBase };","map":null,"metadata":{},"sourceType":"module"}
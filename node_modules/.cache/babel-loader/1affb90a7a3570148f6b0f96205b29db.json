{"ast":null,"code":"export var DATA_PORTAL_ATTRIBUTE = 'data-portal-element';\n/**\r\n * Sets the virtual parent of an element.\r\n * Pass `undefined` as the `parent` to clear the virtual parent.\r\n *\r\n * @public\r\n */\n\nexport function setVirtualParent(child, parent) {\n  var virtualChild = child;\n  var virtualParent = parent;\n\n  if (!virtualChild._virtual) {\n    virtualChild._virtual = {\n      children: []\n    };\n  }\n\n  var oldParent = virtualChild._virtual.parent;\n\n  if (oldParent && oldParent !== parent) {\n    // Remove the child from its old parent.\n    var index = oldParent._virtual.children.indexOf(virtualChild);\n\n    if (index > -1) {\n      oldParent._virtual.children.splice(index, 1);\n    }\n  }\n\n  virtualChild._virtual.parent = virtualParent || undefined;\n\n  if (virtualParent) {\n    if (!virtualParent._virtual) {\n      virtualParent._virtual = {\n        children: []\n      };\n    }\n\n    virtualParent._virtual.children.push(virtualChild);\n  }\n}\n/**\r\n * Gets the virtual parent given the child element, if it exists.\r\n *\r\n * @public\r\n */\n\nexport function getVirtualParent(child) {\n  var parent;\n\n  if (child && isVirtualElement(child)) {\n    parent = child._virtual.parent;\n  }\n\n  return parent;\n}\n/**\r\n * Gets the element which is the parent of a given element.\r\n * If `allowVirtuaParents` is `true`, this method prefers the virtual parent over\r\n * real DOM parent when present.\r\n *\r\n * @public\r\n */\n\nexport function getParent(child, allowVirtualParents) {\n  if (allowVirtualParents === void 0) {\n    allowVirtualParents = true;\n  }\n\n  return child && (allowVirtualParents && getVirtualParent(child) || child.parentNode && child.parentNode);\n}\n/**\r\n * Gets the elements which are child elements of the given element.\r\n * If `allowVirtualChildren` is `true`, this method enumerates virtual child elements\r\n * after the original children.\r\n * @param parent - The element to get the children of.\r\n * @param allowVirtualChildren - true if the method should enumerate virtual child elements.\r\n */\n\nexport function getChildren(parent, allowVirtualChildren) {\n  if (allowVirtualChildren === void 0) {\n    allowVirtualChildren = true;\n  }\n\n  var children = [];\n\n  if (parent) {\n    for (var i = 0; i < parent.children.length; i++) {\n      children.push(parent.children.item(i));\n    }\n\n    if (allowVirtualChildren && isVirtualElement(parent)) {\n      children.push.apply(children, parent._virtual.children);\n    }\n  }\n\n  return children;\n}\n/**\r\n * Determines whether or not a parent element contains a given child element.\r\n * If `allowVirtualParents` is true, this method may return `true` if the child\r\n * has the parent in its virtual element hierarchy.\r\n *\r\n * @public\r\n */\n\nexport function elementContains(parent, child, allowVirtualParents) {\n  if (allowVirtualParents === void 0) {\n    allowVirtualParents = true;\n  }\n\n  var isContained = false;\n\n  if (parent && child) {\n    if (allowVirtualParents) {\n      isContained = false;\n\n      while (child) {\n        var nextParent = getParent(child);\n\n        if (nextParent === parent) {\n          isContained = true;\n          break;\n        }\n\n        child = nextParent;\n      }\n    } else if (parent.contains) {\n      isContained = parent.contains(child);\n    }\n  }\n\n  return isContained;\n}\nvar _isSSR = false;\n/**\r\n * Helper to set ssr mode to simulate no window object returned from getWindow helper.\r\n *\r\n * @public\r\n */\n\nexport function setSSR(isEnabled) {\n  _isSSR = isEnabled;\n}\n/**\r\n * Helper to get the window object.\r\n *\r\n * @public\r\n */\n\nexport function getWindow(rootElement) {\n  if (_isSSR || typeof window === 'undefined') {\n    return undefined;\n  } else {\n    return rootElement && rootElement.ownerDocument && rootElement.ownerDocument.defaultView ? rootElement.ownerDocument.defaultView : window;\n  }\n}\n/**\r\n * Helper to get the document object.\r\n *\r\n * @public\r\n */\n\nexport function getDocument(rootElement) {\n  if (_isSSR || typeof document === 'undefined') {\n    return undefined;\n  } else {\n    return rootElement && rootElement.ownerDocument ? rootElement.ownerDocument : document;\n  }\n}\n/**\r\n * Helper to get bounding client rect, works with window.\r\n *\r\n * @public\r\n */\n\nexport function getRect(element) {\n  var rect;\n\n  if (element) {\n    if (element === window) {\n      rect = {\n        left: 0,\n        top: 0,\n        width: window.innerWidth,\n        height: window.innerHeight,\n        right: window.innerWidth,\n        bottom: window.innerHeight\n      };\n    } else if (element.getBoundingClientRect) {\n      rect = element.getBoundingClientRect();\n    }\n  }\n\n  return rect;\n}\n/**\r\n * Identify element as a portal by setting an attribute.\r\n * @param element - Element to mark as a portal.\r\n */\n\nexport function setPortalAttribute(element) {\n  element.setAttribute(DATA_PORTAL_ATTRIBUTE, 'true');\n}\n/**\r\n * Determine whether a target is within a portal from perspective of root or optional parent.\r\n * This function only works against portal components that use the setPortalAttribute function.\r\n * If both parent and child are within the same portal this function will return false.\r\n * @param target - Element to query portal containment status of.\r\n * @param parent - Optional parent perspective. Search for containing portal stops at parent (or root if parent is undefined or invalid.)\r\n */\n\nexport function portalContainsElement(target, parent) {\n  var elementMatch = findElementRecursive(target, function (testElement) {\n    return parent === testElement || testElement.hasAttribute(DATA_PORTAL_ATTRIBUTE);\n  });\n  return elementMatch !== null && elementMatch.hasAttribute(DATA_PORTAL_ATTRIBUTE);\n}\n/**\r\n * Finds the first parent element where the matchFunction returns true\r\n * @param element - element to start searching at\r\n * @param matchFunction - the function that determines if the element is a match\r\n * @returns the matched element or null no match was found\r\n */\n\nexport function findElementRecursive(element, matchFunction) {\n  if (!element || element === document.body) {\n    return null;\n  }\n\n  return matchFunction(element) ? element : findElementRecursive(getParent(element), matchFunction);\n}\n/**\r\n * Determines if an element, or any of its ancestors, contain the given attribute\r\n * @param element - element to start searching at\r\n * @param attribute - the attribute to search for\r\n * @returns the value of the first instance found\r\n */\n\nexport function elementContainsAttribute(element, attribute) {\n  var elementMatch = findElementRecursive(element, function (testElement) {\n    return testElement.hasAttribute(attribute);\n  });\n  return elementMatch && elementMatch.getAttribute(attribute);\n}\n/**\r\n * Determines whether or not an element has the virtual hierarchy extension.\r\n *\r\n * @public\r\n */\n\nfunction isVirtualElement(element) {\n  return element && !!element._virtual;\n}","map":null,"metadata":{},"sourceType":"module"}
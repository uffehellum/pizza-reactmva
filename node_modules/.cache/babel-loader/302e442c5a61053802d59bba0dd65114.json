{"ast":null,"code":"export var DEFAULT_MASK_FORMAT_CHARS = {\n  '9': /[0-9]/,\n  a: /[a-zA-Z]/,\n  '*': /[a-zA-Z0-9]/\n};\n/**\r\n * Takes in the mask string and the formatCharacters and returns an array of MaskValues\r\n * Example:\r\n * mask = 'Phone Number: (999) - 9999'\r\n * return = [\r\n *    { value: undefined, displayIndex: 16, format: /[0-9]/ },\r\n *    { value: undefined, displayIndex: 17, format: /[0-9]/ },\r\n *    { value: undefined, displayIndex: 18, format: /[0-9]/ },\r\n *    { value: undefined, displayIndex: 22, format: /[0-9]/ },\r\n * ]\r\n *\r\n * @param mask The string use to define the format of the displayed maskedValue.\r\n * @param formatChars An object defining how certain characters in the mask should accept input.\r\n */\n\nexport function parseMask(mask, formatChars) {\n  if (formatChars === void 0) {\n    formatChars = DEFAULT_MASK_FORMAT_CHARS;\n  }\n\n  if (!mask) {\n    return [];\n  }\n\n  var maskCharData = []; // Count the escape characters in the mask string.\n\n  var escapedChars = 0;\n\n  for (var i = 0; i + escapedChars < mask.length; i++) {\n    var maskChar = mask.charAt(i + escapedChars);\n\n    if (maskChar === '\\\\') {\n      escapedChars++;\n    } else {\n      // Check if the maskChar is a format character.\n      var maskFormat = formatChars[maskChar];\n\n      if (maskFormat) {\n        maskCharData.push({\n          /**\r\n           * Do not add escapedChars to the displayIndex.\r\n           * The index refers to a position in the mask's displayValue.\r\n           * Since the backslashes don't appear in the displayValue,\r\n           * we do not add them to the charData displayIndex.\r\n           */\n          displayIndex: i,\n          format: maskFormat\n        });\n      }\n    }\n  }\n\n  return maskCharData;\n}\n/**\r\n * Takes in the mask string, an array of MaskValues, and the maskCharacter\r\n * returns the mask string formatted with the input values and maskCharacter.\r\n * If the maskChar is undefined, the maskDisplay is truncated to the last filled format character.\r\n * Example:\r\n * mask = 'Phone Number: (999) 999 - 9999'\r\n * maskCharData = '12345'\r\n * maskChar = '_'\r\n * return = 'Phone Number: (123) 45_ - ___'\r\n *\r\n * Example:\r\n * mask = 'Phone Number: (999) 999 - 9999'\r\n * value = '12345'\r\n * maskChar = undefined\r\n * return = 'Phone Number: (123) 45'\r\n *\r\n * @param mask The string use to define the format of the displayed maskedValue.\r\n * @param maskCharData The input values to insert into the mask string for displaying.\r\n * @param maskChar? A character to display in place of unfilled mask format characters.\r\n */\n\nexport function getMaskDisplay(mask, maskCharData, maskChar) {\n  var maskDisplay = mask;\n\n  if (!maskDisplay) {\n    return '';\n  } // Remove all backslashes\n\n\n  maskDisplay = maskDisplay.replace(/\\\\/g, ''); // lastDisplayIndex is is used to truncate the string if necessary.\n\n  var lastDisplayIndex = 0;\n\n  if (maskCharData.length > 0) {\n    lastDisplayIndex = maskCharData[0].displayIndex - 1;\n  }\n  /**\r\n   * For each input value, replace the character in the maskDisplay with the value.\r\n   * If there is no value set for the format character, use the maskChar.\r\n   */\n\n\n  for (var _i = 0, maskCharData_1 = maskCharData; _i < maskCharData_1.length; _i++) {\n    var charData = maskCharData_1[_i];\n    var nextChar = ' ';\n\n    if (charData.value) {\n      nextChar = charData.value;\n\n      if (charData.displayIndex > lastDisplayIndex) {\n        lastDisplayIndex = charData.displayIndex;\n      }\n    } else {\n      if (maskChar) {\n        nextChar = maskChar;\n      }\n    } // Insert the character into the maskdisplay at its corresponding index\n\n\n    maskDisplay = maskDisplay.slice(0, charData.displayIndex) + nextChar + maskDisplay.slice(charData.displayIndex + 1);\n  } // Cut off all mask characters after the last filled format value\n\n\n  if (!maskChar) {\n    maskDisplay = maskDisplay.slice(0, lastDisplayIndex + 1);\n  }\n\n  return maskDisplay;\n}\n/**\r\n * Get the next format index right of or at a specified index.\r\n * If no index exists, returns the rightmost index.\r\n * @param maskCharData\r\n * @param index\r\n */\n\nexport function getRightFormatIndex(maskCharData, index) {\n  for (var i = 0; i < maskCharData.length; i++) {\n    if (maskCharData[i].displayIndex >= index) {\n      return maskCharData[i].displayIndex;\n    }\n  }\n\n  return maskCharData[maskCharData.length - 1].displayIndex;\n}\n/**\r\n * Get the next format index left of a specified index.\r\n * If no index exists, returns the leftmost index.\r\n * @param maskCharData\r\n * @param index\r\n */\n\nexport function getLeftFormatIndex(maskCharData, index) {\n  for (var i = maskCharData.length - 1; i >= 0; i--) {\n    if (maskCharData[i].displayIndex < index) {\n      return maskCharData[i].displayIndex;\n    }\n  }\n\n  return maskCharData[0].displayIndex;\n}\n/**\r\n * Deletes all values in maskCharData with a displayIndex that falls inside the specified range.\r\n * maskCharData is modified inline and also returned.\r\n * @param maskCharData\r\n * @param selectionStart\r\n * @param selectionCount\r\n */\n\nexport function clearRange(maskCharData, selectionStart, selectionCount) {\n  for (var i = 0; i < maskCharData.length; i++) {\n    if (maskCharData[i].displayIndex >= selectionStart) {\n      if (maskCharData[i].displayIndex >= selectionStart + selectionCount) {\n        break;\n      }\n\n      maskCharData[i].value = undefined;\n    }\n  }\n\n  return maskCharData;\n}\n/**\r\n * Deletes the input character at or after a specified index and returns the new array of charData\r\n * maskCharData is modified inline and also returned.\r\n * @param maskCharData\r\n * @param selectionStart\r\n */\n\nexport function clearNext(maskCharData, selectionStart) {\n  for (var i = 0; i < maskCharData.length; i++) {\n    if (maskCharData[i].displayIndex >= selectionStart) {\n      maskCharData[i].value = undefined;\n      break;\n    }\n  }\n\n  return maskCharData;\n}\n/**\r\n * Deletes the input character before a specified index and returns the new array of charData\r\n * maskCharData is modified inline and also returned.\r\n * @param maskCharData\r\n * @param selectionStart\r\n */\n\nexport function clearPrev(maskCharData, selectionStart) {\n  for (var i = maskCharData.length - 1; i >= 0; i--) {\n    if (maskCharData[i].displayIndex < selectionStart) {\n      maskCharData[i].value = undefined;\n      break;\n    }\n  }\n\n  return maskCharData;\n}\n/**\r\n * Deletes all values in maskCharData with a displayIndex that falls inside the specified range.\r\n * Modifies the maskCharData inplace with the passed string and returns the display index of the\r\n * next format character after the inserted string.\r\n * @param maskCharData\r\n * @param selectionStart\r\n * @param selectionCount\r\n * @return The displayIndex of the next format character\r\n */\n\nexport function insertString(maskCharData, selectionStart, newString) {\n  var stringIndex = 0;\n  var nextIndex = 0;\n  var isStringInserted = false; // Iterate through _maskCharData finding values with a displayIndex after the specified range start\n\n  for (var i = 0; i < maskCharData.length && stringIndex < newString.length; i++) {\n    if (maskCharData[i].displayIndex >= selectionStart) {\n      isStringInserted = true;\n      nextIndex = maskCharData[i].displayIndex; // Find the next character in the newString that matches the format\n\n      while (stringIndex < newString.length) {\n        // If the character matches the format regexp, set the maskCharData to the new character\n        if (maskCharData[i].format.test(newString.charAt(stringIndex))) {\n          maskCharData[i].value = newString.charAt(stringIndex++); // Set the nextIndex to the display index of the next mask format character.\n\n          if (i + 1 < maskCharData.length) {\n            nextIndex = maskCharData[i + 1].displayIndex;\n          } else {\n            nextIndex++;\n          }\n\n          break;\n        }\n\n        stringIndex++;\n      }\n    }\n  }\n\n  return isStringInserted ? nextIndex : selectionStart;\n}","map":null,"metadata":{},"sourceType":"module"}
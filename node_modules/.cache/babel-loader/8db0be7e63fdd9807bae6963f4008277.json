{"ast":null,"code":"import { EventGroup } from './EventGroup';\nimport { findScrollableParent } from './scroll';\nimport { getRect } from './dom';\nvar SCROLL_ITERATION_DELAY = 16;\nvar SCROLL_GUTTER_HEIGHT = 100;\nvar MAX_SCROLL_VELOCITY = 15;\n/**\r\n * AutoScroll simply hooks up mouse events given a parent element, and scrolls the container\r\n * up/down depending on how close the mouse is to the top/bottom of the container.\r\n *\r\n * Once you don't want autoscroll any more, just dispose the helper and it will unhook events.\r\n *\r\n * @public\r\n */\n\nvar AutoScroll =\n/** @class */\nfunction () {\n  function AutoScroll(element) {\n    this._events = new EventGroup(this);\n    this._scrollableParent = findScrollableParent(element);\n    this._incrementScroll = this._incrementScroll.bind(this);\n    this._scrollRect = getRect(this._scrollableParent); // tslint:disable-next-line:no-any\n\n    if (this._scrollableParent === window) {\n      this._scrollableParent = document.body;\n    }\n\n    if (this._scrollableParent) {\n      this._events.on(window, 'mousemove', this._onMouseMove, true);\n\n      this._events.on(window, 'touchmove', this._onTouchMove, true);\n    }\n  }\n\n  AutoScroll.prototype.dispose = function () {\n    this._events.dispose();\n\n    this._stopScroll();\n  };\n\n  AutoScroll.prototype._onMouseMove = function (ev) {\n    this._computeScrollVelocity(ev.clientY);\n  };\n\n  AutoScroll.prototype._onTouchMove = function (ev) {\n    if (ev.touches.length > 0) {\n      this._computeScrollVelocity(ev.touches[0].clientY);\n    }\n  };\n\n  AutoScroll.prototype._computeScrollVelocity = function (clientY) {\n    if (!this._scrollRect) {\n      return;\n    }\n\n    var scrollRectTop = this._scrollRect.top;\n    var scrollClientBottom = scrollRectTop + this._scrollRect.height - SCROLL_GUTTER_HEIGHT;\n\n    if (clientY < scrollRectTop + SCROLL_GUTTER_HEIGHT) {\n      this._scrollVelocity = Math.max(-MAX_SCROLL_VELOCITY, -MAX_SCROLL_VELOCITY * ((SCROLL_GUTTER_HEIGHT - (clientY - scrollRectTop)) / SCROLL_GUTTER_HEIGHT));\n    } else if (clientY > scrollClientBottom) {\n      this._scrollVelocity = Math.min(MAX_SCROLL_VELOCITY, MAX_SCROLL_VELOCITY * ((clientY - scrollClientBottom) / SCROLL_GUTTER_HEIGHT));\n    } else {\n      this._scrollVelocity = 0;\n    }\n\n    if (this._scrollVelocity) {\n      this._startScroll();\n    } else {\n      this._stopScroll();\n    }\n  };\n\n  AutoScroll.prototype._startScroll = function () {\n    if (!this._timeoutId) {\n      this._incrementScroll();\n    }\n  };\n\n  AutoScroll.prototype._incrementScroll = function () {\n    if (this._scrollableParent) {\n      this._scrollableParent.scrollTop += Math.round(this._scrollVelocity);\n    }\n\n    this._timeoutId = setTimeout(this._incrementScroll, SCROLL_ITERATION_DELAY);\n  };\n\n  AutoScroll.prototype._stopScroll = function () {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n      delete this._timeoutId;\n    }\n  };\n\n  return AutoScroll;\n}();\n\nexport { AutoScroll };","map":null,"metadata":{},"sourceType":"module"}
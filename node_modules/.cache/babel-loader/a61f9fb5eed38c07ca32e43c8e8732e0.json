{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { BaseComponent, css } from '../../Utilities';\nimport * as stylesImport from './DocumentCard.scss';\nvar styles = stylesImport;\nvar TRUNCATION_SEPARATOR = '&hellip;';\nvar TRUNCATION_MINIMUM_LENGTH = 40; // This is the length we know can fit into the min width of DocumentCard.\n\nvar TRUNCATION_MAXIMUM_LENGTH = 90 - TRUNCATION_SEPARATOR.length; // This is the length we know can fit into the min width 2 lines of DocumentCard.\n\nvar TRUNCATION_MINI_LENGTH_SECONDARY = 80;\nvar TRUNCATION_MAX_LENGTH_SECONDARY = 130 - TRUNCATION_SEPARATOR.length;\nvar TRUNCATION_FIRST_PIECE_LONGER_BY = 10;\nvar TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD = 5;\n\nvar DocumentCardTitle =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(DocumentCardTitle, _super);\n\n  function DocumentCardTitle(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._titleElement = React.createRef();\n\n    _this._startTruncation = function (props) {\n      var originalTitle = props.title;\n      _this._isTruncated = false;\n      var miniLength = props.showAsSecondaryTitle ? TRUNCATION_MINI_LENGTH_SECONDARY : TRUNCATION_MINIMUM_LENGTH;\n      var maxLength = props.showAsSecondaryTitle ? TRUNCATION_MAX_LENGTH_SECONDARY : TRUNCATION_MAXIMUM_LENGTH; // If the title is really short, there's no need to truncate it\n\n      if (originalTitle && originalTitle.length >= miniLength) {\n        // Break the text into two pieces for assembly later\n        if (originalTitle.length > maxLength) {\n          // The text is really long, so we can take a chunk out of the middle so the two pieces combine for the maximum length\n          _this._isTruncated = true;\n\n          _this.setState({\n            truncatedTitleFirstPiece: originalTitle.slice(0, maxLength / 2 + TRUNCATION_FIRST_PIECE_LONGER_BY),\n            truncatedTitleSecondPiece: originalTitle.slice(originalTitle.length - (maxLength / 2 - TRUNCATION_FIRST_PIECE_LONGER_BY))\n          });\n        } else {\n          // The text is not so long, so we'll just break it into two pieces\n          _this.setState({\n            truncatedTitleFirstPiece: originalTitle.slice(0, Math.ceil(originalTitle.length / 2) + TRUNCATION_FIRST_PIECE_LONGER_BY),\n            truncatedTitleSecondPiece: originalTitle.slice(originalTitle.length - Math.floor(originalTitle.length / 2) + TRUNCATION_FIRST_PIECE_LONGER_BY)\n          });\n        }\n      } // Save the width we just started truncation at, so that later we will only update truncation if necessary\n\n\n      if (_this._titleElement.current) {\n        _this._truncatedTitleAtWidth = _this._titleElement.current.clientWidth;\n      }\n    };\n\n    _this.state = {\n      truncatedTitleFirstPiece: '',\n      truncatedTitleSecondPiece: ''\n    };\n    return _this;\n  }\n\n  DocumentCardTitle.prototype.componentDidMount = function () {\n    var _a = this.props,\n        title = _a.title,\n        shouldTruncate = _a.shouldTruncate,\n        showAsSecondaryTitle = _a.showAsSecondaryTitle;\n    var miniLength = showAsSecondaryTitle ? TRUNCATION_MINI_LENGTH_SECONDARY : TRUNCATION_MINIMUM_LENGTH;\n\n    if (shouldTruncate && title && title.length > miniLength) {\n      if (this._doesTitleOverflow()) {\n        this._startTruncation(this.props);\n      }\n\n      this._events.on(window, 'resize', this._updateTruncation);\n    }\n  };\n\n  DocumentCardTitle.prototype.componentWillReceiveProps = function (newProps) {\n    this._events.off(window, 'resize');\n\n    this._isTruncated = false;\n    var miniLength = newProps.showAsSecondaryTitle ? TRUNCATION_MINI_LENGTH_SECONDARY : TRUNCATION_MINIMUM_LENGTH;\n\n    if (newProps.shouldTruncate && newProps.title && newProps.title.length > miniLength) {\n      this._startTruncation(newProps);\n\n      this._events.on(window, 'resize', this._updateTruncation);\n    }\n  };\n\n  DocumentCardTitle.prototype.componentDidUpdate = function () {\n    // If we're truncating, make sure the title fits\n    if (this.props.shouldTruncate) {\n      this._shrinkTitle();\n    }\n  };\n\n  DocumentCardTitle.prototype.render = function () {\n    var _a = this.props,\n        title = _a.title,\n        shouldTruncate = _a.shouldTruncate,\n        showAsSecondaryTitle = _a.showAsSecondaryTitle;\n    var _b = this.state,\n        truncatedTitleFirstPiece = _b.truncatedTitleFirstPiece,\n        truncatedTitleSecondPiece = _b.truncatedTitleSecondPiece;\n    var documentCardTitle;\n\n    if (shouldTruncate && this._isTruncated) {\n      documentCardTitle = React.createElement(\"div\", {\n        className: css('ms-DocumentCardTitle', showAsSecondaryTitle ? styles.secondaryTitle : styles.title),\n        ref: this._titleElement,\n        title: title\n      }, truncatedTitleFirstPiece, \"\\u2026\", truncatedTitleSecondPiece);\n    } else {\n      documentCardTitle = React.createElement(\"div\", {\n        className: css('ms-DocumentCardTitle', showAsSecondaryTitle ? styles.secondaryTitle : styles.title),\n        ref: this._titleElement,\n        title: title\n      }, title);\n    }\n\n    return documentCardTitle;\n  };\n\n  DocumentCardTitle.prototype._shrinkTitle = function () {\n    if (this._doesTitleOverflow()) {\n      var _a = this.state,\n          truncatedTitleFirstPiece = _a.truncatedTitleFirstPiece,\n          truncatedTitleSecondPiece = _a.truncatedTitleSecondPiece;\n      this._isTruncated = true;\n\n      if (truncatedTitleFirstPiece || truncatedTitleSecondPiece) {\n        this.setState({\n          truncatedTitleFirstPiece: truncatedTitleFirstPiece.slice(0, truncatedTitleFirstPiece.length - 1),\n          truncatedTitleSecondPiece: truncatedTitleSecondPiece.slice(1)\n        });\n      }\n    }\n  };\n\n  DocumentCardTitle.prototype._doesTitleOverflow = function () {\n    var titleElement = this._titleElement.current;\n\n    if (!titleElement) {\n      return false;\n    }\n\n    return titleElement.scrollHeight > titleElement.clientHeight + TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD || titleElement.scrollWidth > titleElement.clientWidth;\n  };\n\n  DocumentCardTitle.prototype._updateTruncation = function () {\n    // Only update truncation if the title's size has changed since the last time we truncated\n    if (this._titleElement.current && this._titleElement.current.clientWidth !== this._truncatedTitleAtWidth) {\n      // Throttle truncation so that it doesn't happen during a window resize\n      clearTimeout(this._scrollTimerId);\n      this._scrollTimerId = this._async.setTimeout(this._startTruncation.bind(this, this.props), 250);\n    }\n  };\n\n  return DocumentCardTitle;\n}(BaseComponent);\n\nexport { DocumentCardTitle };","map":null,"metadata":{},"sourceType":"module"}
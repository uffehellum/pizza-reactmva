{"ast":null,"code":"import { KeyCodes } from './KeyCodes';\nimport { getDocument } from './dom';\nimport { getItem, setItem } from './sessionStorage';\nimport { setRTL as mergeStylesSetRTL } from '@uifabric/merge-styles';\nvar RTL_LOCAL_STORAGE_KEY = 'isRTL'; // Default to undefined so that we initialize on first read.\n\nvar _isRTL;\n/**\r\n * Gets the rtl state of the page (returns true if in rtl.)\r\n */\n\n\nexport function getRTL() {\n  if (_isRTL === undefined) {\n    // Fabric supports persisting the RTL setting between page refreshes via session storage\n    var savedRTL = getItem(RTL_LOCAL_STORAGE_KEY);\n\n    if (savedRTL !== null) {\n      _isRTL = savedRTL === '1';\n      setRTL(_isRTL);\n    }\n\n    var doc = getDocument();\n\n    if (_isRTL === undefined && doc) {\n      _isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\n      mergeStylesSetRTL(_isRTL);\n    }\n  }\n\n  return !!_isRTL;\n}\n/**\r\n * Sets the rtl state of the page (by adjusting the dir attribute of the html element.)\r\n */\n\nexport function setRTL(isRTL, persistSetting) {\n  if (persistSetting === void 0) {\n    persistSetting = false;\n  }\n\n  var doc = getDocument();\n\n  if (doc) {\n    doc.documentElement.setAttribute('dir', isRTL ? 'rtl' : 'ltr');\n  }\n\n  if (persistSetting) {\n    setItem(RTL_LOCAL_STORAGE_KEY, isRTL ? '1' : '0');\n  }\n\n  _isRTL = isRTL;\n  mergeStylesSetRTL(_isRTL);\n}\n/**\r\n * Returns the given key, but flips right/left arrows if necessary.\r\n */\n\nexport function getRTLSafeKeyCode(key) {\n  if (getRTL()) {\n    if (key === KeyCodes.left) {\n      key = KeyCodes.right;\n    } else if (key === KeyCodes.right) {\n      key = KeyCodes.left;\n    }\n  }\n\n  return key;\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport { DelayedRender, BaseComponent, getId, getNativeProps, inputProperties, textAreaProperties, createRef, classNamesFunction } from '../../Utilities';\nvar getClassNames = classNamesFunction();\nvar DEFAULT_STATE_VALUE = '';\n\nvar TextFieldBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(TextFieldBase, _super);\n\n  function TextFieldBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._textElement = createRef();\n\n    _this._onFocus = function (ev) {\n      if (_this.props.onFocus) {\n        _this.props.onFocus(ev);\n      }\n\n      _this.setState({\n        isFocused: true\n      });\n\n      if (_this.props.validateOnFocusIn) {\n        _this._validate(_this.state.value);\n      }\n    };\n\n    _this._onBlur = function (ev) {\n      if (_this.props.onBlur) {\n        _this.props.onBlur(ev);\n      }\n\n      _this.setState({\n        isFocused: false\n      });\n\n      if (_this.props.validateOnFocusOut) {\n        _this._validate(_this.state.value);\n      }\n    };\n\n    _this._onRenderLabel = function (props) {\n      var label = props.label,\n          required = props.required; // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n\n      var labelStyles = _this._classNames.subComponentStyles ? _this._classNames.subComponentStyles.label : undefined;\n\n      if (label) {\n        return React.createElement(Label, {\n          required: required,\n          htmlFor: _this._id,\n          styles: labelStyles\n        }, props.label);\n      }\n\n      return null;\n    };\n\n    _this._onRenderDescription = function (props) {\n      if (props.description) {\n        return React.createElement(\"span\", {\n          className: _this._classNames.description\n        }, props.description);\n      }\n\n      return null;\n    };\n\n    _this._onInputChange = function (event) {\n      event.persist();\n      var element = event.target;\n      var value = element.value; // Avoid doing unnecessary work when the value has not changed.\n\n      if (value === _this._latestValue) {\n        return;\n      }\n\n      _this._latestValue = value;\n\n      _this.setState({\n        value: value\n      }, function () {\n        _this._adjustInputHeight();\n\n        if (_this.props.onChange) {\n          _this.props.onChange(event, value);\n        }\n\n        if (_this.props.onChanged) {\n          _this.props.onChanged(value);\n        }\n      });\n\n      var _a = _this.props,\n          validateOnFocusIn = _a.validateOnFocusIn,\n          validateOnFocusOut = _a.validateOnFocusOut;\n\n      if (!(validateOnFocusIn || validateOnFocusOut)) {\n        _this._delayedValidate(value);\n      }\n\n      if (_this.props.onBeforeChange) {\n        _this.props.onBeforeChange(value);\n      }\n    };\n\n    _this._warnDeprecations({\n      iconClass: 'iconProps',\n      addonString: 'prefix',\n      onRenderAddon: 'onRenderPrefix',\n      onChanged: 'onChange'\n    });\n\n    _this._warnMutuallyExclusive({\n      value: 'defaultValue'\n    });\n\n    _this._id = props.id || getId('TextField');\n    _this._descriptionId = getId('TextFieldDescription');\n\n    if (props.value !== undefined) {\n      _this._latestValue = props.value;\n    } else if (props.defaultValue !== undefined) {\n      _this._latestValue = props.defaultValue;\n    } else {\n      _this._latestValue = DEFAULT_STATE_VALUE;\n    }\n\n    _this.state = {\n      value: _this._latestValue,\n      isFocused: false,\n      errorMessage: ''\n    };\n    _this._delayedValidate = _this._async.debounce(_this._validate, _this.props.deferredValidationTime);\n    _this._lastValidation = 0;\n    return _this;\n  }\n\n  Object.defineProperty(TextFieldBase.prototype, \"value\", {\n    /**\r\n     * Gets the current value of the text field.\r\n     */\n    get: function get() {\n      return this.state.value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TextFieldBase.prototype.componentDidMount = function () {\n    this._isMounted = true;\n\n    this._adjustInputHeight();\n\n    if (this.props.validateOnLoad) {\n      this._validate(this.state.value);\n    }\n  };\n\n  TextFieldBase.prototype.componentWillReceiveProps = function (newProps) {\n    var onBeforeChange = this.props.onBeforeChange; // If old value prop was undefined, then component is controlled and we should\n    //    respect new undefined value and update state accordingly.\n\n    if (newProps.value !== this.state.value && (newProps.value !== undefined || this.props.value !== undefined)) {\n      if (onBeforeChange) {\n        onBeforeChange(newProps.value);\n      }\n\n      this._id = newProps.id || this._id;\n\n      this._setValue(newProps.value);\n\n      var validateOnFocusIn = newProps.validateOnFocusIn,\n          validateOnFocusOut = newProps.validateOnFocusOut;\n\n      if (!(validateOnFocusIn || validateOnFocusOut)) {\n        this._delayedValidate(newProps.value);\n      }\n    } // If component is not currently controlled and defaultValue changes, set value to new defaultValue.\n\n\n    if (newProps.defaultValue !== this.props.defaultValue && newProps.value === undefined) {\n      this._setValue(newProps.defaultValue);\n    } // Text field is changing between single- and multi-line. After the change is complete,\n    // we'll need to reset focus and selection/cursor.\n\n\n    if (!!newProps.multiline !== !!this.props.multiline && this.state.isFocused) {\n      this._shouldResetFocusAfterRender = true;\n      this._selectionBeforeInputTypeChange = [this.selectionStart, this.selectionEnd];\n    }\n  };\n\n  TextFieldBase.prototype.componentDidUpdate = function () {\n    if (this._shouldResetFocusAfterRender) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this._shouldResetFocusAfterRender = false;\n      this.focus();\n\n      if (this._selectionBeforeInputTypeChange) {\n        var _a = this._selectionBeforeInputTypeChange,\n            start = _a[0],\n            end = _a[1];\n\n        if (start !== null && end !== null) {\n          this.setSelectionRange(start, end);\n        }\n      }\n    }\n  };\n\n  TextFieldBase.prototype.componentWillUnmount = function () {\n    this._isMounted = false;\n  };\n\n  TextFieldBase.prototype.render = function () {\n    var _a = this.props,\n        borderless = _a.borderless,\n        className = _a.className,\n        disabled = _a.disabled,\n        iconClass = _a.iconClass,\n        iconProps = _a.iconProps,\n        inputClassName = _a.inputClassName,\n        label = _a.label,\n        multiline = _a.multiline,\n        required = _a.required,\n        underlined = _a.underlined,\n        addonString = _a.addonString,\n        // @deprecated\n    prefix = _a.prefix,\n        resizable = _a.resizable,\n        suffix = _a.suffix,\n        theme = _a.theme,\n        styles = _a.styles,\n        autoAdjustHeight = _a.autoAdjustHeight,\n        _b = _a.onRenderAddon,\n        onRenderAddon = _b === void 0 ? this._onRenderAddon : _b,\n        // @deprecated\n    _c = _a.onRenderPrefix,\n        // @deprecated\n    onRenderPrefix = _c === void 0 ? this._onRenderPrefix : _c,\n        _d = _a.onRenderSuffix,\n        onRenderSuffix = _d === void 0 ? this._onRenderSuffix : _d,\n        _e = _a.onRenderLabel,\n        onRenderLabel = _e === void 0 ? this._onRenderLabel : _e,\n        _f = _a.onRenderDescription,\n        onRenderDescription = _f === void 0 ? this._onRenderDescription : _f;\n    var isFocused = this.state.isFocused;\n    var errorMessage = this._errorMessage;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      disabled: disabled,\n      focused: isFocused,\n      required: required,\n      multiline: multiline,\n      hasLabel: !!label,\n      hasErrorMessage: !!errorMessage,\n      borderless: borderless,\n      resizable: resizable,\n      hasIcon: !!iconProps,\n      underlined: underlined,\n      iconClass: iconClass,\n      inputClassName: inputClassName,\n      autoAdjustHeight: autoAdjustHeight\n    });\n    return React.createElement(\"div\", {\n      className: this._classNames.root\n    }, React.createElement(\"div\", {\n      className: this._classNames.wrapper\n    }, onRenderLabel(this.props, this._onRenderLabel), React.createElement(\"div\", {\n      className: this._classNames.fieldGroup\n    }, (addonString !== undefined || this.props.onRenderAddon) && React.createElement(\"div\", {\n      className: this._classNames.prefix\n    }, onRenderAddon(this.props, this._onRenderAddon)), (prefix !== undefined || this.props.onRenderPrefix) && React.createElement(\"div\", {\n      className: this._classNames.prefix\n    }, onRenderPrefix(this.props, this._onRenderPrefix)), multiline ? this._renderTextArea() : this._renderInput(), (iconClass || iconProps) && React.createElement(Icon, tslib_1.__assign({\n      className: this._classNames.icon\n    }, iconProps)), (suffix !== undefined || this.props.onRenderSuffix) && React.createElement(\"div\", {\n      className: this._classNames.suffix\n    }, onRenderSuffix(this.props, this._onRenderSuffix)))), this._isDescriptionAvailable && React.createElement(\"span\", {\n      id: this._descriptionId\n    }, onRenderDescription(this.props, this._onRenderDescription), errorMessage && React.createElement(\"div\", {\n      role: \"alert\"\n    }, React.createElement(DelayedRender, null, React.createElement(\"p\", {\n      className: this._classNames.errorMessage\n    }, React.createElement(\"span\", {\n      \"data-automation-id\": \"error-message\"\n    }, errorMessage))))));\n  };\n  /**\r\n   * Sets focus on the text field\r\n   */\n\n\n  TextFieldBase.prototype.focus = function () {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  };\n  /**\r\n   * Blurs the text field.\r\n   */\n\n\n  TextFieldBase.prototype.blur = function () {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  };\n  /**\r\n   * Selects the text field\r\n   */\n\n\n  TextFieldBase.prototype.select = function () {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  };\n  /**\r\n   * Sets the selection start of the text field to a specified value\r\n   */\n\n\n  TextFieldBase.prototype.setSelectionStart = function (value) {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  };\n  /**\r\n   * Sets the selection end of the text field to a specified value\r\n   */\n\n\n  TextFieldBase.prototype.setSelectionEnd = function (value) {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  };\n\n  Object.defineProperty(TextFieldBase.prototype, \"selectionStart\", {\n    /**\r\n     * Gets the selection start of the text field\r\n     */\n    get: function get() {\n      return this._textElement.current ? this._textElement.current.selectionStart : -1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TextFieldBase.prototype, \"selectionEnd\", {\n    /**\r\n     * Gets the selection end of the text field\r\n     */\n    get: function get() {\n      return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets the start and end positions of a selection in a text field.\r\n   * @param start - Index of the start of the selection.\r\n   * @param end - Index of the end of the selection.\r\n   */\n\n  TextFieldBase.prototype.setSelectionRange = function (start, end) {\n    if (this._textElement.current) {\n      this._textElement.current.setSelectionRange(start, end);\n    }\n  };\n\n  TextFieldBase.prototype._setValue = function (value) {\n    var _this = this;\n\n    this._latestValue = value;\n    this.setState({\n      value: value || DEFAULT_STATE_VALUE,\n      errorMessage: ''\n    }, function () {\n      _this._adjustInputHeight();\n    });\n  }; // @deprecated\n\n\n  TextFieldBase.prototype._onRenderAddon = function (props) {\n    var addonString = props.addonString;\n    return React.createElement(\"span\", {\n      style: {\n        paddingBottom: '1px'\n      }\n    }, addonString);\n  };\n\n  TextFieldBase.prototype._onRenderPrefix = function (props) {\n    var prefix = props.prefix;\n    return React.createElement(\"span\", {\n      style: {\n        paddingBottom: '1px'\n      }\n    }, prefix);\n  };\n\n  TextFieldBase.prototype._onRenderSuffix = function (props) {\n    var suffix = props.suffix;\n    return React.createElement(\"span\", {\n      style: {\n        paddingBottom: '1px'\n      }\n    }, suffix);\n  };\n\n  Object.defineProperty(TextFieldBase.prototype, \"_errorMessage\", {\n    get: function get() {\n      var errorMessage = this.state.errorMessage;\n\n      if (!errorMessage && this.props.errorMessage) {\n        errorMessage = this.props.errorMessage;\n      }\n\n      return errorMessage;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TextFieldBase.prototype, \"_isDescriptionAvailable\", {\n    /**\r\n     * If a custom description render function is supplied then treat description as always available.\r\n     * Otherwise defer to the presence of description or error message text.\r\n     */\n    get: function get() {\n      var props = this.props;\n      return !!(props.onRenderDescription || props.description || this._errorMessage);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TextFieldBase.prototype._renderTextArea = function () {\n    var textAreaProps = getNativeProps(this.props, textAreaProperties, ['defaultValue']);\n    return React.createElement(\"textarea\", tslib_1.__assign({\n      id: this._id\n    }, textAreaProps, {\n      ref: this._textElement,\n      value: this.state.value,\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      \"aria-describedby\": this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      \"aria-invalid\": !!this.state.errorMessage,\n      \"aria-label\": this.props.ariaLabel,\n      readOnly: this.props.readOnly,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur\n    }));\n  };\n\n  TextFieldBase.prototype._renderInput = function () {\n    var inputProps = getNativeProps(this.props, inputProperties, ['defaultValue']);\n    return React.createElement(\"input\", tslib_1.__assign({\n      type: 'text',\n      id: this._id\n    }, inputProps, {\n      ref: this._textElement,\n      value: this.state.value,\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      \"aria-label\": this.props.ariaLabel,\n      \"aria-describedby\": this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      \"aria-invalid\": !!this.state.errorMessage,\n      readOnly: this.props.readOnly,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur\n    }));\n  };\n\n  TextFieldBase.prototype._validate = function (value) {\n    var _this = this;\n\n    var _a = this.props,\n        validateOnFocusIn = _a.validateOnFocusIn,\n        validateOnFocusOut = _a.validateOnFocusOut; // In case of _validate called multi-times during executing validate logic with promise return.\n\n    if (this._latestValidateValue === value && !(validateOnFocusIn || validateOnFocusOut)) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    var onGetErrorMessage = this.props.onGetErrorMessage;\n    var result = onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string') {\n        this.setState({\n          errorMessage: result\n        });\n\n        this._notifyAfterValidate(value, result);\n      } else {\n        var currentValidation_1 = ++this._lastValidation;\n        result.then(function (errorMessage) {\n          if (_this._isMounted && currentValidation_1 === _this._lastValidation) {\n            _this.setState({\n              errorMessage: errorMessage\n            });\n          }\n\n          _this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  };\n\n  TextFieldBase.prototype._notifyAfterValidate = function (value, errorMessage) {\n    if (this._isMounted && value === this.state.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  };\n\n  TextFieldBase.prototype._adjustInputHeight = function () {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      var textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  };\n\n  TextFieldBase.defaultProps = {\n    multiline: false,\n    resizable: true,\n    autoAdjustHeight: false,\n    underlined: false,\n    borderless: false,\n    onChange: function onChange() {\n      /* noop */\n    },\n    onBeforeChange: function onBeforeChange() {\n      /* noop */\n    },\n    onNotifyValidationResult: function onNotifyValidationResult() {\n      /* noop */\n    },\n    onGetErrorMessage: function onGetErrorMessage() {\n      return undefined;\n    },\n    deferredValidationTime: 200,\n    errorMessage: '',\n    validateOnFocusIn: false,\n    validateOnFocusOut: false,\n    validateOnLoad: true\n  };\n  return TextFieldBase;\n}(BaseComponent);\n\nexport { TextFieldBase };","map":null,"metadata":{},"sourceType":"module"}
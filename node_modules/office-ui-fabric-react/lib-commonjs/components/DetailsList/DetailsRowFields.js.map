{"version":3,"file":"DetailsRowFields.js","sourceRoot":"../src/","sources":["components/DetailsList/DetailsRowFields.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { IColumn } from './DetailsList.types';\r\nimport { BaseComponent, css } from '../../Utilities';\r\nimport { IDetailsRowFieldsProps } from './DetailsRowFields.types';\r\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\r\n\r\nexport interface IDetailsRowFieldsState {\r\n  cellContent: React.ReactNode[];\r\n}\r\n\r\nexport class DetailsRowFields extends BaseComponent<IDetailsRowFieldsProps, IDetailsRowFieldsState> {\r\n  constructor(props: IDetailsRowFieldsProps) {\r\n    super(props);\r\n\r\n    this.state = this._getState(props);\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: IDetailsRowFieldsProps): void {\r\n    this.setState(this._getState(newProps));\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { columns, columnStartIndex, shimmer, rowClassNames, cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = this.props;\r\n\r\n    const { cellContent } = this.state;\r\n\r\n    return (\r\n      <div className={rowClassNames.fields} data-automationid=\"DetailsRowFields\" role=\"presentation\">\r\n        {columns.map((column, columnIndex) => {\r\n          const width: string | number =\r\n            typeof column.calculatedWidth === 'undefined'\r\n              ? 'auto'\r\n              : column.calculatedWidth +\r\n                cellStyleProps.cellLeftPadding +\r\n                cellStyleProps.cellRightPadding +\r\n                (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\r\n\r\n          return (\r\n            <div\r\n              key={columnIndex}\r\n              role={column.isRowHeader ? 'rowheader' : 'gridcell'}\r\n              aria-colindex={columnIndex + columnStartIndex + 1}\r\n              className={css(\r\n                column.className,\r\n                column.isMultiline && rowClassNames.isMultiline,\r\n                column.isRowHeader && rowClassNames.isRowHeader,\r\n                column.isIconOnly && shimmer && rowClassNames.shimmerIconPlaceholder,\r\n                shimmer && rowClassNames.shimmer,\r\n                rowClassNames.cell,\r\n                column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded\r\n              )}\r\n              style={{ width }}\r\n              data-automationid=\"DetailsRowCell\"\r\n              data-automation-key={column.key}\r\n            >\r\n              {cellContent[columnIndex]}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _getState(props: IDetailsRowFieldsProps): IDetailsRowFieldsState {\r\n    const { item, itemIndex, onRenderItemColumn, shimmer } = props;\r\n\r\n    return {\r\n      cellContent: props.columns.map(column => {\r\n        let cellContent;\r\n\r\n        try {\r\n          const render = column.onRender || onRenderItemColumn;\r\n\r\n          cellContent = render && !shimmer ? render(item, itemIndex, column) : this._getCellText(item, column);\r\n        } catch (e) {\r\n          /* no-op */\r\n        }\r\n\r\n        return cellContent;\r\n      })\r\n    };\r\n  }\r\n\r\n  private _getCellText(item: any, column: IColumn): void {\r\n    let value = item && column && column.fieldName ? item[column.fieldName] : '';\r\n\r\n    if (value === null || value === undefined) {\r\n      value = '';\r\n    }\r\n\r\n    return value;\r\n  }\r\n}\r\n"]}
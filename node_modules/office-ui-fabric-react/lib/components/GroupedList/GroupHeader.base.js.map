{"version":3,"file":"GroupHeader.base.js","sourceRoot":"../src/","sources":["components/GroupedList/GroupHeader.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent, classNamesFunction, IClassNames } from '../../Utilities';\r\nimport { IGroupDividerProps } from './GroupedList.types';\r\nimport { SelectionMode } from '../../utilities/selection/index';\r\nimport { Check } from '../../Check';\r\nimport { Icon } from '../../Icon';\r\nimport { GroupSpacer } from './GroupSpacer';\r\nimport { Spinner } from '../../Spinner';\r\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\r\nimport { IGroupHeaderStyleProps, IGroupHeaderStyles, IGroupHeaderProps } from './GroupHeader.types';\r\n\r\nconst getClassNames = classNamesFunction<IGroupHeaderStyleProps, IGroupHeaderStyles>();\r\n\r\nexport interface IGroupHeaderState {\r\n  isCollapsed: boolean;\r\n  isLoadingVisible: boolean;\r\n}\r\n\r\nexport class GroupHeaderBase extends BaseComponent<IGroupHeaderProps, IGroupHeaderState> {\r\n  public static defaultProps: IGroupDividerProps = {\r\n    expandButtonProps: { 'aria-label': 'expand collapse group' }\r\n  };\r\n\r\n  private _classNames: IClassNames<IGroupHeaderStyles>;\r\n\r\n  constructor(props: IGroupDividerProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isCollapsed: (this.props.group && this.props.group.isCollapsed) as boolean,\r\n      isLoadingVisible: false\r\n    };\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: any): void {\r\n    if (newProps.group) {\r\n      const newCollapsed = newProps.group.isCollapsed;\r\n      const isGroupLoading = newProps.headerProps && newProps.headerProps.isGroupLoading;\r\n      const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(newProps.group);\r\n\r\n      this.setState({\r\n        isCollapsed: newCollapsed,\r\n        isLoadingVisible: newLoadingVisible\r\n      });\r\n    }\r\n  }\r\n\r\n  public render(): JSX.Element | null {\r\n    const {\r\n      group,\r\n      groupLevel,\r\n      viewport,\r\n      selectionMode,\r\n      loadingText,\r\n      isSelected,\r\n      selected,\r\n      indentWidth,\r\n      onRenderTitle = this._onRenderTitle,\r\n      isCollapsedGroupSelectVisible = true,\r\n      expandButtonProps,\r\n      theme,\r\n      styles,\r\n      className,\r\n      groupedListId\r\n    } = this.props;\r\n\r\n    const { isCollapsed, isLoadingVisible } = this.state;\r\n\r\n    const canSelectGroup = selectionMode === SelectionMode.multiple;\r\n    const isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\r\n    const currentlySelected = isSelected || selected;\r\n\r\n    this._classNames = getClassNames(styles, {\r\n      theme: theme!,\r\n      className,\r\n      selected: currentlySelected,\r\n      isCollapsed\r\n    });\r\n\r\n    if (!group) {\r\n      return null;\r\n    }\r\n    return (\r\n      <div\r\n        className={this._classNames.root}\r\n        style={viewport ? { minWidth: viewport.width } : {}}\r\n        onClick={this._onHeaderClick}\r\n        aria-label={group.ariaLabel || group.name}\r\n        data-is-focusable={true}\r\n      >\r\n        <FocusZone className={this._classNames.groupHeaderContainer} direction={FocusZoneDirection.horizontal}>\r\n          {isSelectionCheckVisible ? (\r\n            <button\r\n              type=\"button\"\r\n              className={this._classNames.check}\r\n              role=\"checkbox\"\r\n              aria-checked={!!currentlySelected}\r\n              data-selection-toggle={true}\r\n              onClick={this._onToggleSelectGroupClick}\r\n            >\r\n              <Check checked={currentlySelected} />\r\n            </button>\r\n          ) : (\r\n            selectionMode !== SelectionMode.none && <GroupSpacer indentWidth={indentWidth} count={1} />\r\n          )}\r\n\r\n          <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\r\n\r\n          <div className={this._classNames.dropIcon}>\r\n            <Icon iconName=\"Tag\" />\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className={this._classNames.expand}\r\n            onClick={this._onToggleCollapse}\r\n            aria-expanded={group ? !group.isCollapsed : undefined}\r\n            aria-controls={group && !group.isCollapsed ? groupedListId : undefined}\r\n            {...expandButtonProps}\r\n          >\r\n            <Icon className={this._classNames.expandIsCollapsed} iconName=\"ChevronDown\" />\r\n          </button>\r\n\r\n          {onRenderTitle(this.props, this._onRenderTitle)}\r\n\r\n          {isLoadingVisible && <Spinner label={loadingText} />}\r\n        </FocusZone>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onToggleCollapse = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    const { group, onToggleCollapse, isGroupLoading } = this.props;\r\n    const { isCollapsed } = this.state;\r\n\r\n    const newCollapsed = !isCollapsed;\r\n    const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group!);\r\n\r\n    this.setState({\r\n      isCollapsed: newCollapsed,\r\n      isLoadingVisible: newLoadingVisible as boolean\r\n    });\r\n    if (onToggleCollapse) {\r\n      onToggleCollapse(group!);\r\n    }\r\n\r\n    ev.stopPropagation();\r\n    ev.preventDefault();\r\n  };\r\n\r\n  private _onToggleSelectGroupClick = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    const { onToggleSelectGroup, group } = this.props;\r\n\r\n    if (onToggleSelectGroup) {\r\n      onToggleSelectGroup(group!);\r\n    }\r\n\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  };\r\n\r\n  private _onHeaderClick = (): void => {\r\n    const { group, onGroupHeaderClick, onToggleSelectGroup } = this.props;\r\n\r\n    if (onGroupHeaderClick) {\r\n      onGroupHeaderClick(group!);\r\n    } else if (onToggleSelectGroup) {\r\n      onToggleSelectGroup(group!);\r\n    }\r\n  };\r\n\r\n  private _onRenderTitle = (props: IGroupDividerProps): JSX.Element | null => {\r\n    const { group } = props;\r\n\r\n    if (!group) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div className={this._classNames.title}>\r\n        <span>{group.name}</span>\r\n        {\r\n          // hasMoreData flag is set when grouping is throttled by SPO server which in turn resorts to regular\r\n          // sorting to simulate grouping behaviors, in which case group count is the number of items returned\r\n          // so far. That's the reason we need to use \"+\" to show we might have more items than count\r\n          // indicates.\r\n        }\r\n        <span className={this._classNames.headerCount}>\r\n          ({group.count}\r\n          {group.hasMoreData && '+'})\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n"]}
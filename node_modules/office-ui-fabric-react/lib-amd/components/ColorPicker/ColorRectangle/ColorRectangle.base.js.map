{"version":3,"file":"ColorRectangle.base.js","sourceRoot":"../src/","sources":["components/ColorPicker/ColorRectangle/ColorRectangle.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent, assign, classNamesFunction } from '../../../Utilities';\r\nimport { IColor, MAX_COLOR_SATURATION, MAX_COLOR_VALUE, getFullColorString, hsv2hex } from '../../../utilities/color/colors';\r\nimport { IColorRectangleProps, IColorRectangleStyleProps, IColorRectangleStyles } from './ColorRectangle.types';\r\n\r\nconst getClassNames = classNamesFunction<IColorRectangleStyleProps, IColorRectangleStyles>();\r\n\r\nexport interface IColorRectangleState {\r\n  isAdjusting?: boolean;\r\n  origin?: { x: number; y: number; color: IColor };\r\n  color?: IColor;\r\n  fullColorString?: string;\r\n}\r\n\r\nexport class ColorRectangleBase extends BaseComponent<IColorRectangleProps, IColorRectangleState> {\r\n  public static defaultProps = {\r\n    minSize: 220\r\n  };\r\n\r\n  private _root = React.createRef<HTMLDivElement>();\r\n\r\n  constructor(props: IColorRectangleProps) {\r\n    super(props);\r\n\r\n    const { color } = this.props;\r\n\r\n    this.state = {\r\n      isAdjusting: false,\r\n      origin: undefined,\r\n      color: color,\r\n      fullColorString: getFullColorString(color)\r\n    };\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    this._events.dispose();\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: IColorRectangleProps): void {\r\n    const { color } = newProps;\r\n\r\n    this.setState({\r\n      color: color,\r\n      fullColorString: getFullColorString(color)\r\n    });\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { minSize, theme, className, styles } = this.props;\r\n    const { color, fullColorString } = this.state;\r\n\r\n    const classNames = getClassNames(styles!, {\r\n      theme: theme!,\r\n      className\r\n    });\r\n\r\n    return (\r\n      <div\r\n        ref={this._root}\r\n        className={classNames.root}\r\n        style={{ minWidth: minSize, minHeight: minSize, backgroundColor: fullColorString }}\r\n        onMouseDown={this._onMouseDown}\r\n      >\r\n        <div className={classNames.light} />\r\n        <div className={classNames.dark} />\r\n        <div\r\n          className={classNames.thumb}\r\n          style={{ left: color!.s + '%', top: MAX_COLOR_VALUE - color!.v + '%', backgroundColor: color!.str }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    this._events.on(window, 'mousemove', this._onMouseMove, true);\r\n    this._events.on(window, 'mouseup', this._onMouseUp, true);\r\n\r\n    this._onMouseMove(ev);\r\n  };\r\n\r\n  private _onMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    const { color, onSVChanged } = this.props;\r\n\r\n    if (!this._root.current) {\r\n      return;\r\n    }\r\n\r\n    const rectSize = this._root.current.getBoundingClientRect();\r\n\r\n    const sPercentage = (ev.clientX - rectSize.left) / rectSize.width;\r\n    const vPercentage = (ev.clientY - rectSize.top) / rectSize.height;\r\n\r\n    const newColor = assign({}, color, {\r\n      s: Math.min(MAX_COLOR_SATURATION, Math.max(0, sPercentage * MAX_COLOR_SATURATION)),\r\n      v: Math.min(MAX_COLOR_VALUE, Math.max(0, MAX_COLOR_VALUE - vPercentage * MAX_COLOR_VALUE))\r\n    });\r\n\r\n    newColor.hex = hsv2hex(newColor.h, newColor.s, newColor.v);\r\n    newColor.str = newColor.a === 100 ? '#' + newColor.hex : `rgba(${newColor.r}, ${newColor.g}, ${newColor.b}, ${newColor.a / 100})`;\r\n\r\n    this.setState({\r\n      isAdjusting: true,\r\n      color: newColor\r\n    });\r\n\r\n    if (onSVChanged) {\r\n      onSVChanged(newColor.s, newColor.v);\r\n    }\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  };\r\n\r\n  private _onMouseUp = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    this._events.off();\r\n\r\n    this.setState({\r\n      isAdjusting: false,\r\n      origin: undefined\r\n    });\r\n  };\r\n}\r\n"]}
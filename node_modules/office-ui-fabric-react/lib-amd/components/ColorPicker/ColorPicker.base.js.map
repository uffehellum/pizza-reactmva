{"version":3,"file":"ColorPicker.base.js","sourceRoot":"../src/","sources":["components/ColorPicker/ColorPicker.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent, classNamesFunction } from '../../Utilities';\r\nimport { IColorPickerProps, IColorPickerStyleProps, IColorPickerStyles } from './ColorPicker.types';\r\nimport { ITextField, TextField } from '../../TextField';\r\nimport { ColorRectangle } from './ColorRectangle/ColorRectangle';\r\nimport { ColorSlider } from './ColorSlider/ColorSlider';\r\nimport { MAX_COLOR_HUE, IColor, getColorFromString, getColorFromRGBA, updateA, updateH, updateSV } from '../../utilities/color/colors';\r\n\r\nexport interface IColorPickerState {\r\n  isOpen: boolean;\r\n  color: IColor;\r\n}\r\n\r\nconst getClassNames = classNamesFunction<IColorPickerStyleProps, IColorPickerStyles>();\r\n\r\nexport class ColorPickerBase extends BaseComponent<IColorPickerProps, IColorPickerState> {\r\n  public static defaultProps = {\r\n    hexLabel: 'Hex',\r\n    redLabel: 'Red',\r\n    greenLabel: 'Green',\r\n    blueLabel: 'Blue',\r\n    alphaLabel: 'Alpha'\r\n  };\r\n\r\n  private _hexText = React.createRef<ITextField>();\r\n  private _rText = React.createRef<ITextField>();\r\n  private _gText = React.createRef<ITextField>();\r\n  private _bText = React.createRef<ITextField>();\r\n  private _aText = React.createRef<ITextField>();\r\n\r\n  constructor(props: IColorPickerProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      color: getColorFromString(props.color)\r\n    } as IColorPickerState;\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: IColorPickerProps): void {\r\n    if (newProps.color) {\r\n      this._updateColor(getColorFromString(newProps.color));\r\n    }\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { theme, className, styles } = this.props;\r\n    const { color } = this.state;\r\n\r\n    const classNames = getClassNames(styles!, {\r\n      theme: theme!,\r\n      className\r\n    });\r\n\r\n    return (\r\n      <div className={classNames.root}>\r\n        <div className={classNames.panel}>\r\n          <ColorRectangle color={color} onSVChanged={this._onSVChanged} />\r\n          <ColorSlider className=\"is-hue\" minValue={0} maxValue={MAX_COLOR_HUE} value={color.h} onChange={this._onHChanged} />\r\n          {!this.props.alphaSliderHidden && (\r\n            <ColorSlider\r\n              className=\"is-alpha\"\r\n              isAlpha\r\n              overlayStyle={{ background: `linear-gradient(to right, transparent 0, #${color.hex} 100%)` }}\r\n              minValue={0}\r\n              maxValue={100}\r\n              value={color.a}\r\n              onChange={this._onAChanged}\r\n            />\r\n          )}\r\n          <table className={classNames.table} cellPadding=\"0\" cellSpacing=\"0\">\r\n            <thead>\r\n              <tr className={classNames.tableHeader}>\r\n                <td className={classNames.tableHexCell}>{this.props.hexLabel}</td>\r\n                <td>{this.props.redLabel}</td>\r\n                <td>{this.props.greenLabel}</td>\r\n                <td>{this.props.blueLabel}</td>\r\n                {!this.props.alphaSliderHidden && <td>{this.props.alphaLabel}</td>}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  <TextField\r\n                    className={classNames.input}\r\n                    value={color.hex}\r\n                    componentRef={this._hexText}\r\n                    onBlur={this._onHexChanged}\r\n                    spellCheck={false}\r\n                    ariaLabel={this.props.hexLabel}\r\n                  />\r\n                </td>\r\n                <td style={{ width: '18%' }}>\r\n                  <TextField\r\n                    className={classNames.input}\r\n                    onBlur={this._onRGBAChanged}\r\n                    value={String(color.r)}\r\n                    componentRef={this._rText}\r\n                    spellCheck={false}\r\n                    ariaLabel={this.props.redLabel}\r\n                  />\r\n                </td>\r\n                <td style={{ width: '18%' }}>\r\n                  <TextField\r\n                    className={classNames.input}\r\n                    onBlur={this._onRGBAChanged}\r\n                    value={String(color.g)}\r\n                    componentRef={this._gText}\r\n                    spellCheck={false}\r\n                    ariaLabel={this.props.greenLabel}\r\n                  />\r\n                </td>\r\n                <td style={{ width: '18%' }}>\r\n                  <TextField\r\n                    className={classNames.input}\r\n                    onBlur={this._onRGBAChanged}\r\n                    value={String(color.b)}\r\n                    componentRef={this._bText}\r\n                    spellCheck={false}\r\n                    ariaLabel={this.props.blueLabel}\r\n                  />\r\n                </td>\r\n                {!this.props.alphaSliderHidden && (\r\n                  <td style={{ width: '18%' }}>\r\n                    <TextField\r\n                      className={classNames.input}\r\n                      onBlur={this._onRGBAChanged}\r\n                      value={String(color.a ? color.a.toPrecision(3) : color.a)}\r\n                      componentRef={this._aText}\r\n                      spellCheck={false}\r\n                      ariaLabel={this.props.alphaLabel}\r\n                    />\r\n                  </td>\r\n                )}\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onSVChanged = (s: number, v: number): void => {\r\n    this._updateColor(updateSV(this.state.color, s, v));\r\n  };\r\n\r\n  private _onHChanged = (ev: React.MouseEvent<HTMLElement>, h: number): void => {\r\n    this._updateColor(updateH(this.state.color, h));\r\n  };\r\n\r\n  private _onAChanged = (ev: React.MouseEvent<HTMLElement>, a: number): void => {\r\n    this._updateColor(updateA(this.state.color, a));\r\n  };\r\n\r\n  private _onHexChanged = (): void => {\r\n    if (this._hexText.current) {\r\n      this._updateColor(getColorFromString('#' + this._hexText.current.value));\r\n    }\r\n  };\r\n\r\n  private _onRGBAChanged = (): void => {\r\n    if (!this._rText.current || !this._gText.current || !this._bText.current || !this._aText.current) {\r\n      return;\r\n    }\r\n\r\n    this._updateColor(\r\n      getColorFromRGBA({\r\n        r: Number(this._rText.current.value),\r\n        g: Number(this._gText.current.value),\r\n        b: Number(this._bText.current.value),\r\n        a: Number(this._aText.current.value || 100)\r\n      })\r\n    );\r\n  };\r\n\r\n  private _updateColor(newColor?: IColor): void {\r\n    if (!newColor) {\r\n      return;\r\n    }\r\n\r\n    const { onColorChanged } = this.props;\r\n    const { color } = this.state;\r\n    const hasColorStringChanged = newColor.str !== color.str;\r\n    if (newColor.h !== color.h || hasColorStringChanged) {\r\n      this.setState(\r\n        {\r\n          color: newColor\r\n        } as IColorPickerState,\r\n        () => {\r\n          if (hasColorStringChanged && onColorChanged) {\r\n            onColorChanged(newColor.str, newColor);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n}\r\n"]}